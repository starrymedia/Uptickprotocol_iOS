// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tendermint/types/types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BlockIdFlag indicates which BlcokID the signature is for
enum Tendermint_Types_BlockIDFlag: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case absent // = 1
  case commit // = 2
  case `nil` // = 3
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .absent
    case 2: self = .commit
    case 3: self = .nil
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .absent: return 1
    case .commit: return 2
    case .nil: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tendermint_Types_BlockIDFlag: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tendermint_Types_BlockIDFlag] = [
    .unknown,
    .absent,
    .commit,
    .nil,
  ]
}

#endif  // swift(>=4.2)

/// SignedMsgType is a type of signed message in the consensus.
enum Tendermint_Types_SignedMsgType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0

  /// Votes
  case prevote // = 1
  case precommit // = 2

  /// Proposals
  case proposal // = 32
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .prevote
    case 2: self = .precommit
    case 32: self = .proposal
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .prevote: return 1
    case .precommit: return 2
    case .proposal: return 32
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tendermint_Types_SignedMsgType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tendermint_Types_SignedMsgType] = [
    .unknown,
    .prevote,
    .precommit,
    .proposal,
  ]
}

#endif  // swift(>=4.2)

/// PartsetHeader
struct Tendermint_Types_PartSetHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var total: UInt32 = 0

  var hash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Types_Part {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: UInt32 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  var bytes: Data {
    get {return _storage._bytes}
    set {_uniqueStorage()._bytes = newValue}
  }

  var proof: Tendermint_Crypto_Proof {
    get {return _storage._proof ?? Tendermint_Crypto_Proof()}
    set {_uniqueStorage()._proof = newValue}
  }
  /// Returns true if `proof` has been explicitly set.
  var hasProof: Bool {return _storage._proof != nil}
  /// Clears the value of `proof`. Subsequent reads from it will return its default value.
  mutating func clearProof() {_uniqueStorage()._proof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// BlockID
struct Tendermint_Types_BlockID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  var partSetHeader: Tendermint_Types_PartSetHeader {
    get {return _storage._partSetHeader ?? Tendermint_Types_PartSetHeader()}
    set {_uniqueStorage()._partSetHeader = newValue}
  }
  /// Returns true if `partSetHeader` has been explicitly set.
  var hasPartSetHeader: Bool {return _storage._partSetHeader != nil}
  /// Clears the value of `partSetHeader`. Subsequent reads from it will return its default value.
  mutating func clearPartSetHeader() {_uniqueStorage()._partSetHeader = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Header defines the structure of a Tendermint block header.
struct Tendermint_Types_Header {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// basic block info
  var version: Tendermint_Version_Consensus {
    get {return _storage._version ?? Tendermint_Version_Consensus()}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {_uniqueStorage()._version = nil}

  var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  /// prev block info
  var lastBlockID: Tendermint_Types_BlockID {
    get {return _storage._lastBlockID ?? Tendermint_Types_BlockID()}
    set {_uniqueStorage()._lastBlockID = newValue}
  }
  /// Returns true if `lastBlockID` has been explicitly set.
  var hasLastBlockID: Bool {return _storage._lastBlockID != nil}
  /// Clears the value of `lastBlockID`. Subsequent reads from it will return its default value.
  mutating func clearLastBlockID() {_uniqueStorage()._lastBlockID = nil}

  /// hashes of block data
  var lastCommitHash: Data {
    get {return _storage._lastCommitHash}
    set {_uniqueStorage()._lastCommitHash = newValue}
  }

  /// transactions
  var dataHash: Data {
    get {return _storage._dataHash}
    set {_uniqueStorage()._dataHash = newValue}
  }

  /// hashes from the app output from the prev block
  var validatorsHash: Data {
    get {return _storage._validatorsHash}
    set {_uniqueStorage()._validatorsHash = newValue}
  }

  /// validators for the next block
  var nextValidatorsHash: Data {
    get {return _storage._nextValidatorsHash}
    set {_uniqueStorage()._nextValidatorsHash = newValue}
  }

  /// consensus params for current block
  var consensusHash: Data {
    get {return _storage._consensusHash}
    set {_uniqueStorage()._consensusHash = newValue}
  }

  /// state after txs from the previous block
  var appHash: Data {
    get {return _storage._appHash}
    set {_uniqueStorage()._appHash = newValue}
  }

  /// root hash of all results from the txs from the previous block
  var lastResultsHash: Data {
    get {return _storage._lastResultsHash}
    set {_uniqueStorage()._lastResultsHash = newValue}
  }

  /// consensus info
  var evidenceHash: Data {
    get {return _storage._evidenceHash}
    set {_uniqueStorage()._evidenceHash = newValue}
  }

  /// original proposer of the block
  var proposerAddress: Data {
    get {return _storage._proposerAddress}
    set {_uniqueStorage()._proposerAddress = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Data contains the set of transactions included in the block
struct Tendermint_Types_Data {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Txs that will be applied by state @ block.Height+1.
  ///
  /// NOTE: not all txs here are valid.  We're just agreeing on the order first.
  ///
  /// This means that block.AppHash does not include these txs.
  var txs: [Data] = []

  /// Volatile
  var hash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Vote represents a prevote, precommit, or commit vote from validators for
///
/// consensus.
struct Tendermint_Types_Vote {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Tendermint_Types_SignedMsgType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var round: Int32 {
    get {return _storage._round}
    set {_uniqueStorage()._round = newValue}
  }

  /// zero if vote is nil.
  var blockID: Tendermint_Types_BlockID {
    get {return _storage._blockID ?? Tendermint_Types_BlockID()}
    set {_uniqueStorage()._blockID = newValue}
  }
  /// Returns true if `blockID` has been explicitly set.
  var hasBlockID: Bool {return _storage._blockID != nil}
  /// Clears the value of `blockID`. Subsequent reads from it will return its default value.
  mutating func clearBlockID() {_uniqueStorage()._blockID = nil}

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var validatorAddress: Data {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  var validatorIndex: Int32 {
    get {return _storage._validatorIndex}
    set {_uniqueStorage()._validatorIndex = newValue}
  }

  var signature: Data {
    get {return _storage._signature}
    set {_uniqueStorage()._signature = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Commit contains the evidence that a block was committed by a set of validators.
struct Tendermint_Types_Commit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var round: Int32 {
    get {return _storage._round}
    set {_uniqueStorage()._round = newValue}
  }

  var blockID: Tendermint_Types_BlockID {
    get {return _storage._blockID ?? Tendermint_Types_BlockID()}
    set {_uniqueStorage()._blockID = newValue}
  }
  /// Returns true if `blockID` has been explicitly set.
  var hasBlockID: Bool {return _storage._blockID != nil}
  /// Clears the value of `blockID`. Subsequent reads from it will return its default value.
  mutating func clearBlockID() {_uniqueStorage()._blockID = nil}

  var signatures: [Tendermint_Types_CommitSig] {
    get {return _storage._signatures}
    set {_uniqueStorage()._signatures = newValue}
  }

  var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  var bitArray: Tendermint_Libs_Bits_BitArray {
    get {return _storage._bitArray ?? Tendermint_Libs_Bits_BitArray()}
    set {_uniqueStorage()._bitArray = newValue}
  }
  /// Returns true if `bitArray` has been explicitly set.
  var hasBitArray: Bool {return _storage._bitArray != nil}
  /// Clears the value of `bitArray`. Subsequent reads from it will return its default value.
  mutating func clearBitArray() {_uniqueStorage()._bitArray = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// CommitSig is a part of the Vote included in a Commit.
struct Tendermint_Types_CommitSig {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockIDFlag: Tendermint_Types_BlockIDFlag {
    get {return _storage._blockIDFlag}
    set {_uniqueStorage()._blockIDFlag = newValue}
  }

  var validatorAddress: Data {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var signature: Data {
    get {return _storage._signature}
    set {_uniqueStorage()._signature = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Types_Proposal {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Tendermint_Types_SignedMsgType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var round: Int32 {
    get {return _storage._round}
    set {_uniqueStorage()._round = newValue}
  }

  var polRound: Int32 {
    get {return _storage._polRound}
    set {_uniqueStorage()._polRound = newValue}
  }

  var blockID: Tendermint_Types_BlockID {
    get {return _storage._blockID ?? Tendermint_Types_BlockID()}
    set {_uniqueStorage()._blockID = newValue}
  }
  /// Returns true if `blockID` has been explicitly set.
  var hasBlockID: Bool {return _storage._blockID != nil}
  /// Clears the value of `blockID`. Subsequent reads from it will return its default value.
  mutating func clearBlockID() {_uniqueStorage()._blockID = nil}

  var timestamp: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._timestamp ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var signature: Data {
    get {return _storage._signature}
    set {_uniqueStorage()._signature = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Types_SignedHeader {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var header: Tendermint_Types_Header {
    get {return _storage._header ?? Tendermint_Types_Header()}
    set {_uniqueStorage()._header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return _storage._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {_uniqueStorage()._header = nil}

  var commit: Tendermint_Types_Commit {
    get {return _storage._commit ?? Tendermint_Types_Commit()}
    set {_uniqueStorage()._commit = newValue}
  }
  /// Returns true if `commit` has been explicitly set.
  var hasCommit: Bool {return _storage._commit != nil}
  /// Clears the value of `commit`. Subsequent reads from it will return its default value.
  mutating func clearCommit() {_uniqueStorage()._commit = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Types_LightBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signedHeader: Tendermint_Types_SignedHeader {
    get {return _storage._signedHeader ?? Tendermint_Types_SignedHeader()}
    set {_uniqueStorage()._signedHeader = newValue}
  }
  /// Returns true if `signedHeader` has been explicitly set.
  var hasSignedHeader: Bool {return _storage._signedHeader != nil}
  /// Clears the value of `signedHeader`. Subsequent reads from it will return its default value.
  mutating func clearSignedHeader() {_uniqueStorage()._signedHeader = nil}

  var validatorSet: Tendermint_Types_ValidatorSet {
    get {return _storage._validatorSet ?? Tendermint_Types_ValidatorSet()}
    set {_uniqueStorage()._validatorSet = newValue}
  }
  /// Returns true if `validatorSet` has been explicitly set.
  var hasValidatorSet: Bool {return _storage._validatorSet != nil}
  /// Clears the value of `validatorSet`. Subsequent reads from it will return its default value.
  mutating func clearValidatorSet() {_uniqueStorage()._validatorSet = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Types_BlockMeta {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var blockID: Tendermint_Types_BlockID {
    get {return _storage._blockID ?? Tendermint_Types_BlockID()}
    set {_uniqueStorage()._blockID = newValue}
  }
  /// Returns true if `blockID` has been explicitly set.
  var hasBlockID: Bool {return _storage._blockID != nil}
  /// Clears the value of `blockID`. Subsequent reads from it will return its default value.
  mutating func clearBlockID() {_uniqueStorage()._blockID = nil}

  var blockSize: Int64 {
    get {return _storage._blockSize}
    set {_uniqueStorage()._blockSize = newValue}
  }

  var header: Tendermint_Types_Header {
    get {return _storage._header ?? Tendermint_Types_Header()}
    set {_uniqueStorage()._header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return _storage._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {_uniqueStorage()._header = nil}

  var numTxs: Int64 {
    get {return _storage._numTxs}
    set {_uniqueStorage()._numTxs = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// TxProof represents a Merkle proof of the presence of a transaction in the Merkle tree.
struct Tendermint_Types_TxProof {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rootHash: Data {
    get {return _storage._rootHash}
    set {_uniqueStorage()._rootHash = newValue}
  }

  var data: Data {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  var proof: Tendermint_Crypto_Proof {
    get {return _storage._proof ?? Tendermint_Crypto_Proof()}
    set {_uniqueStorage()._proof = newValue}
  }
  /// Returns true if `proof` has been explicitly set.
  var hasProof: Bool {return _storage._proof != nil}
  /// Clears the value of `proof`. Subsequent reads from it will return its default value.
  mutating func clearProof() {_uniqueStorage()._proof = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tendermint.types"

extension Tendermint_Types_BlockIDFlag: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BLOCK_ID_FLAG_UNKNOWN"),
    1: .same(proto: "BLOCK_ID_FLAG_ABSENT"),
    2: .same(proto: "BLOCK_ID_FLAG_COMMIT"),
    3: .same(proto: "BLOCK_ID_FLAG_NIL"),
  ]
}

extension Tendermint_Types_SignedMsgType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SIGNED_MSG_TYPE_UNKNOWN"),
    1: .same(proto: "SIGNED_MSG_TYPE_PREVOTE"),
    2: .same(proto: "SIGNED_MSG_TYPE_PRECOMMIT"),
    32: .same(proto: "SIGNED_MSG_TYPE_PROPOSAL"),
  ]
}

extension Tendermint_Types_PartSetHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PartSetHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "total"),
    2: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.total)
      case 2: try decoder.decodeSingularBytesField(value: &self.hash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.total != 0 {
      try visitor.visitSingularUInt32Field(value: self.total, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_PartSetHeader, rhs: Tendermint_Types_PartSetHeader) -> Bool {
    if lhs.total != rhs.total {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_Part: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Part"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "bytes"),
    3: .same(proto: "proof"),
  ]

  fileprivate class _StorageClass {
    var _index: UInt32 = 0
    var _bytes: Data = SwiftProtobuf.Internal.emptyData
    var _proof: Tendermint_Crypto_Proof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _index = source._index
      _bytes = source._bytes
      _proof = source._proof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._index)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._bytes)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._proof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._index != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._index, fieldNumber: 1)
      }
      if !_storage._bytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._bytes, fieldNumber: 2)
      }
      if let v = _storage._proof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_Part, rhs: Tendermint_Types_Part) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._index != rhs_storage._index {return false}
        if _storage._bytes != rhs_storage._bytes {return false}
        if _storage._proof != rhs_storage._proof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_BlockID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .standard(proto: "part_set_header"),
  ]

  fileprivate class _StorageClass {
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _partSetHeader: Tendermint_Types_PartSetHeader? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hash = source._hash
      _partSetHeader = source._partSetHeader
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._partSetHeader)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 1)
      }
      if let v = _storage._partSetHeader {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_BlockID, rhs: Tendermint_Types_BlockID) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._partSetHeader != rhs_storage._partSetHeader {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_Header: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Header"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "chain_id"),
    3: .same(proto: "height"),
    4: .same(proto: "time"),
    5: .standard(proto: "last_block_id"),
    6: .standard(proto: "last_commit_hash"),
    7: .standard(proto: "data_hash"),
    8: .standard(proto: "validators_hash"),
    9: .standard(proto: "next_validators_hash"),
    10: .standard(proto: "consensus_hash"),
    11: .standard(proto: "app_hash"),
    12: .standard(proto: "last_results_hash"),
    13: .standard(proto: "evidence_hash"),
    14: .standard(proto: "proposer_address"),
  ]

  fileprivate class _StorageClass {
    var _version: Tendermint_Version_Consensus? = nil
    var _chainID: String = String()
    var _height: Int64 = 0
    var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _lastBlockID: Tendermint_Types_BlockID? = nil
    var _lastCommitHash: Data = SwiftProtobuf.Internal.emptyData
    var _dataHash: Data = SwiftProtobuf.Internal.emptyData
    var _validatorsHash: Data = SwiftProtobuf.Internal.emptyData
    var _nextValidatorsHash: Data = SwiftProtobuf.Internal.emptyData
    var _consensusHash: Data = SwiftProtobuf.Internal.emptyData
    var _appHash: Data = SwiftProtobuf.Internal.emptyData
    var _lastResultsHash: Data = SwiftProtobuf.Internal.emptyData
    var _evidenceHash: Data = SwiftProtobuf.Internal.emptyData
    var _proposerAddress: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _version = source._version
      _chainID = source._chainID
      _height = source._height
      _time = source._time
      _lastBlockID = source._lastBlockID
      _lastCommitHash = source._lastCommitHash
      _dataHash = source._dataHash
      _validatorsHash = source._validatorsHash
      _nextValidatorsHash = source._nextValidatorsHash
      _consensusHash = source._consensusHash
      _appHash = source._appHash
      _lastResultsHash = source._lastResultsHash
      _evidenceHash = source._evidenceHash
      _proposerAddress = source._proposerAddress
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._version)
        case 2: try decoder.decodeSingularStringField(value: &_storage._chainID)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._time)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._lastBlockID)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._lastCommitHash)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._dataHash)
        case 8: try decoder.decodeSingularBytesField(value: &_storage._validatorsHash)
        case 9: try decoder.decodeSingularBytesField(value: &_storage._nextValidatorsHash)
        case 10: try decoder.decodeSingularBytesField(value: &_storage._consensusHash)
        case 11: try decoder.decodeSingularBytesField(value: &_storage._appHash)
        case 12: try decoder.decodeSingularBytesField(value: &_storage._lastResultsHash)
        case 13: try decoder.decodeSingularBytesField(value: &_storage._evidenceHash)
        case 14: try decoder.decodeSingularBytesField(value: &_storage._proposerAddress)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._version {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 2)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 3)
      }
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._lastBlockID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._lastCommitHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._lastCommitHash, fieldNumber: 6)
      }
      if !_storage._dataHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._dataHash, fieldNumber: 7)
      }
      if !_storage._validatorsHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._validatorsHash, fieldNumber: 8)
      }
      if !_storage._nextValidatorsHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._nextValidatorsHash, fieldNumber: 9)
      }
      if !_storage._consensusHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._consensusHash, fieldNumber: 10)
      }
      if !_storage._appHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appHash, fieldNumber: 11)
      }
      if !_storage._lastResultsHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._lastResultsHash, fieldNumber: 12)
      }
      if !_storage._evidenceHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._evidenceHash, fieldNumber: 13)
      }
      if !_storage._proposerAddress.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._proposerAddress, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_Header, rhs: Tendermint_Types_Header) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._version != rhs_storage._version {return false}
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._lastBlockID != rhs_storage._lastBlockID {return false}
        if _storage._lastCommitHash != rhs_storage._lastCommitHash {return false}
        if _storage._dataHash != rhs_storage._dataHash {return false}
        if _storage._validatorsHash != rhs_storage._validatorsHash {return false}
        if _storage._nextValidatorsHash != rhs_storage._nextValidatorsHash {return false}
        if _storage._consensusHash != rhs_storage._consensusHash {return false}
        if _storage._appHash != rhs_storage._appHash {return false}
        if _storage._lastResultsHash != rhs_storage._lastResultsHash {return false}
        if _storage._evidenceHash != rhs_storage._evidenceHash {return false}
        if _storage._proposerAddress != rhs_storage._proposerAddress {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_Data: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Data"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "txs"),
    2: .same(proto: "hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedBytesField(value: &self.txs)
      case 2: try decoder.decodeSingularBytesField(value: &self.hash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.txs.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.txs, fieldNumber: 1)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_Data, rhs: Tendermint_Types_Data) -> Bool {
    if lhs.txs != rhs.txs {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_Vote: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vote"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "height"),
    3: .same(proto: "round"),
    4: .standard(proto: "block_id"),
    5: .same(proto: "timestamp"),
    6: .standard(proto: "validator_address"),
    7: .standard(proto: "validator_index"),
    8: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _type: Tendermint_Types_SignedMsgType = .unknown
    var _height: Int64 = 0
    var _round: Int32 = 0
    var _blockID: Tendermint_Types_BlockID? = nil
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _validatorAddress: Data = SwiftProtobuf.Internal.emptyData
    var _validatorIndex: Int32 = 0
    var _signature: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _height = source._height
      _round = source._round
      _blockID = source._blockID
      _timestamp = source._timestamp
      _validatorAddress = source._validatorAddress
      _validatorIndex = source._validatorIndex
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._round)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._blockID)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._validatorAddress)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._validatorIndex)
        case 8: try decoder.decodeSingularBytesField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 2)
      }
      if _storage._round != 0 {
        try visitor.visitSingularInt32Field(value: _storage._round, fieldNumber: 3)
      }
      if let v = _storage._blockID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._validatorAddress, fieldNumber: 6)
      }
      if _storage._validatorIndex != 0 {
        try visitor.visitSingularInt32Field(value: _storage._validatorIndex, fieldNumber: 7)
      }
      if !_storage._signature.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._signature, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_Vote, rhs: Tendermint_Types_Vote) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._round != rhs_storage._round {return false}
        if _storage._blockID != rhs_storage._blockID {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._validatorIndex != rhs_storage._validatorIndex {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_Commit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Commit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "round"),
    3: .standard(proto: "block_id"),
    4: .same(proto: "signatures"),
    5: .same(proto: "hash"),
    6: .standard(proto: "bit_array"),
  ]

  fileprivate class _StorageClass {
    var _height: Int64 = 0
    var _round: Int32 = 0
    var _blockID: Tendermint_Types_BlockID? = nil
    var _signatures: [Tendermint_Types_CommitSig] = []
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _bitArray: Tendermint_Libs_Bits_BitArray? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _height = source._height
      _round = source._round
      _blockID = source._blockID
      _signatures = source._signatures
      _hash = source._hash
      _bitArray = source._bitArray
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._round)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._blockID)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._signatures)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._bitArray)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 1)
      }
      if _storage._round != 0 {
        try visitor.visitSingularInt32Field(value: _storage._round, fieldNumber: 2)
      }
      if let v = _storage._blockID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._signatures.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._signatures, fieldNumber: 4)
      }
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 5)
      }
      if let v = _storage._bitArray {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_Commit, rhs: Tendermint_Types_Commit) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._height != rhs_storage._height {return false}
        if _storage._round != rhs_storage._round {return false}
        if _storage._blockID != rhs_storage._blockID {return false}
        if _storage._signatures != rhs_storage._signatures {return false}
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._bitArray != rhs_storage._bitArray {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_CommitSig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CommitSig"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id_flag"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "timestamp"),
    4: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _blockIDFlag: Tendermint_Types_BlockIDFlag = .unknown
    var _validatorAddress: Data = SwiftProtobuf.Internal.emptyData
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _signature: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _blockIDFlag = source._blockIDFlag
      _validatorAddress = source._validatorAddress
      _timestamp = source._timestamp
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._blockIDFlag)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._validatorAddress)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._blockIDFlag != .unknown {
        try visitor.visitSingularEnumField(value: _storage._blockIDFlag, fieldNumber: 1)
      }
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._validatorAddress, fieldNumber: 2)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._signature.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._signature, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_CommitSig, rhs: Tendermint_Types_CommitSig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._blockIDFlag != rhs_storage._blockIDFlag {return false}
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_Proposal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Proposal"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "height"),
    3: .same(proto: "round"),
    4: .standard(proto: "pol_round"),
    5: .standard(proto: "block_id"),
    6: .same(proto: "timestamp"),
    7: .same(proto: "signature"),
  ]

  fileprivate class _StorageClass {
    var _type: Tendermint_Types_SignedMsgType = .unknown
    var _height: Int64 = 0
    var _round: Int32 = 0
    var _polRound: Int32 = 0
    var _blockID: Tendermint_Types_BlockID? = nil
    var _timestamp: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _signature: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _height = source._height
      _round = source._round
      _polRound = source._polRound
      _blockID = source._blockID
      _timestamp = source._timestamp
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._round)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._polRound)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._blockID)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._timestamp)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._signature)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 2)
      }
      if _storage._round != 0 {
        try visitor.visitSingularInt32Field(value: _storage._round, fieldNumber: 3)
      }
      if _storage._polRound != 0 {
        try visitor.visitSingularInt32Field(value: _storage._polRound, fieldNumber: 4)
      }
      if let v = _storage._blockID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._timestamp {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._signature.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._signature, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_Proposal, rhs: Tendermint_Types_Proposal) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._round != rhs_storage._round {return false}
        if _storage._polRound != rhs_storage._polRound {return false}
        if _storage._blockID != rhs_storage._blockID {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_SignedHeader: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SignedHeader"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "header"),
    2: .same(proto: "commit"),
  ]

  fileprivate class _StorageClass {
    var _header: Tendermint_Types_Header? = nil
    var _commit: Tendermint_Types_Commit? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _header = source._header
      _commit = source._commit
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._header)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._commit)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._header {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._commit {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_SignedHeader, rhs: Tendermint_Types_SignedHeader) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._header != rhs_storage._header {return false}
        if _storage._commit != rhs_storage._commit {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_LightBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LightBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_header"),
    2: .standard(proto: "validator_set"),
  ]

  fileprivate class _StorageClass {
    var _signedHeader: Tendermint_Types_SignedHeader? = nil
    var _validatorSet: Tendermint_Types_ValidatorSet? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _signedHeader = source._signedHeader
      _validatorSet = source._validatorSet
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._signedHeader)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._validatorSet)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._signedHeader {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._validatorSet {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_LightBlock, rhs: Tendermint_Types_LightBlock) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._signedHeader != rhs_storage._signedHeader {return false}
        if _storage._validatorSet != rhs_storage._validatorSet {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_BlockMeta: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockMeta"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "block_id"),
    2: .standard(proto: "block_size"),
    3: .same(proto: "header"),
    4: .standard(proto: "num_txs"),
  ]

  fileprivate class _StorageClass {
    var _blockID: Tendermint_Types_BlockID? = nil
    var _blockSize: Int64 = 0
    var _header: Tendermint_Types_Header? = nil
    var _numTxs: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _blockID = source._blockID
      _blockSize = source._blockSize
      _header = source._header
      _numTxs = source._numTxs
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._blockID)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._blockSize)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._header)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._numTxs)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._blockID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._blockSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._blockSize, fieldNumber: 2)
      }
      if let v = _storage._header {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._numTxs != 0 {
        try visitor.visitSingularInt64Field(value: _storage._numTxs, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_BlockMeta, rhs: Tendermint_Types_BlockMeta) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._blockID != rhs_storage._blockID {return false}
        if _storage._blockSize != rhs_storage._blockSize {return false}
        if _storage._header != rhs_storage._header {return false}
        if _storage._numTxs != rhs_storage._numTxs {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Types_TxProof: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxProof"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "root_hash"),
    2: .same(proto: "data"),
    3: .same(proto: "proof"),
  ]

  fileprivate class _StorageClass {
    var _rootHash: Data = SwiftProtobuf.Internal.emptyData
    var _data: Data = SwiftProtobuf.Internal.emptyData
    var _proof: Tendermint_Crypto_Proof? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rootHash = source._rootHash
      _data = source._data
      _proof = source._proof
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._rootHash)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._data)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._proof)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._rootHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._rootHash, fieldNumber: 1)
      }
      if !_storage._data.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._data, fieldNumber: 2)
      }
      if let v = _storage._proof {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Types_TxProof, rhs: Tendermint_Types_TxProof) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rootHash != rhs_storage._rootHash {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._proof != rhs_storage._proof {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
