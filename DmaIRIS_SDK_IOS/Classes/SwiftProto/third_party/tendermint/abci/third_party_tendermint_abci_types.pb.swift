// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: tendermint/abci/types.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Tendermint_Abci_CheckTxType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case new // = 0
  case recheck // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .new
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .new
    case 1: self = .recheck
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .new: return 0
    case .recheck: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tendermint_Abci_CheckTxType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tendermint_Abci_CheckTxType] = [
    .new,
    .recheck,
  ]
}

#endif  // swift(>=4.2)

enum Tendermint_Abci_EvidenceType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case unknown // = 0
  case duplicateVote // = 1
  case lightClientAttack // = 2
  case UNRECOGNIZED(Int)

  init() {
    self = .unknown
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .duplicateVote
    case 2: self = .lightClientAttack
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .duplicateVote: return 1
    case .lightClientAttack: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Tendermint_Abci_EvidenceType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tendermint_Abci_EvidenceType] = [
    .unknown,
    .duplicateVote,
    .lightClientAttack,
  ]
}

#endif  // swift(>=4.2)

struct Tendermint_Abci_Request {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var echo: Tendermint_Abci_RequestEcho {
    get {
      if case .echo(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestEcho()
    }
    set {_uniqueStorage()._value = .echo(newValue)}
  }

  var flush: Tendermint_Abci_RequestFlush {
    get {
      if case .flush(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestFlush()
    }
    set {_uniqueStorage()._value = .flush(newValue)}
  }

  var info: Tendermint_Abci_RequestInfo {
    get {
      if case .info(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestInfo()
    }
    set {_uniqueStorage()._value = .info(newValue)}
  }

  var setOption: Tendermint_Abci_RequestSetOption {
    get {
      if case .setOption(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestSetOption()
    }
    set {_uniqueStorage()._value = .setOption(newValue)}
  }

  var initChain: Tendermint_Abci_RequestInitChain {
    get {
      if case .initChain(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestInitChain()
    }
    set {_uniqueStorage()._value = .initChain(newValue)}
  }

  var query: Tendermint_Abci_RequestQuery {
    get {
      if case .query(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestQuery()
    }
    set {_uniqueStorage()._value = .query(newValue)}
  }

  var beginBlock: Tendermint_Abci_RequestBeginBlock {
    get {
      if case .beginBlock(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestBeginBlock()
    }
    set {_uniqueStorage()._value = .beginBlock(newValue)}
  }

  var checkTx: Tendermint_Abci_RequestCheckTx {
    get {
      if case .checkTx(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestCheckTx()
    }
    set {_uniqueStorage()._value = .checkTx(newValue)}
  }

  var deliverTx: Tendermint_Abci_RequestDeliverTx {
    get {
      if case .deliverTx(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestDeliverTx()
    }
    set {_uniqueStorage()._value = .deliverTx(newValue)}
  }

  var endBlock: Tendermint_Abci_RequestEndBlock {
    get {
      if case .endBlock(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestEndBlock()
    }
    set {_uniqueStorage()._value = .endBlock(newValue)}
  }

  var commit: Tendermint_Abci_RequestCommit {
    get {
      if case .commit(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestCommit()
    }
    set {_uniqueStorage()._value = .commit(newValue)}
  }

  var listSnapshots: Tendermint_Abci_RequestListSnapshots {
    get {
      if case .listSnapshots(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestListSnapshots()
    }
    set {_uniqueStorage()._value = .listSnapshots(newValue)}
  }

  var offerSnapshot: Tendermint_Abci_RequestOfferSnapshot {
    get {
      if case .offerSnapshot(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestOfferSnapshot()
    }
    set {_uniqueStorage()._value = .offerSnapshot(newValue)}
  }

  var loadSnapshotChunk: Tendermint_Abci_RequestLoadSnapshotChunk {
    get {
      if case .loadSnapshotChunk(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestLoadSnapshotChunk()
    }
    set {_uniqueStorage()._value = .loadSnapshotChunk(newValue)}
  }

  var applySnapshotChunk: Tendermint_Abci_RequestApplySnapshotChunk {
    get {
      if case .applySnapshotChunk(let v)? = _storage._value {return v}
      return Tendermint_Abci_RequestApplySnapshotChunk()
    }
    set {_uniqueStorage()._value = .applySnapshotChunk(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case echo(Tendermint_Abci_RequestEcho)
    case flush(Tendermint_Abci_RequestFlush)
    case info(Tendermint_Abci_RequestInfo)
    case setOption(Tendermint_Abci_RequestSetOption)
    case initChain(Tendermint_Abci_RequestInitChain)
    case query(Tendermint_Abci_RequestQuery)
    case beginBlock(Tendermint_Abci_RequestBeginBlock)
    case checkTx(Tendermint_Abci_RequestCheckTx)
    case deliverTx(Tendermint_Abci_RequestDeliverTx)
    case endBlock(Tendermint_Abci_RequestEndBlock)
    case commit(Tendermint_Abci_RequestCommit)
    case listSnapshots(Tendermint_Abci_RequestListSnapshots)
    case offerSnapshot(Tendermint_Abci_RequestOfferSnapshot)
    case loadSnapshotChunk(Tendermint_Abci_RequestLoadSnapshotChunk)
    case applySnapshotChunk(Tendermint_Abci_RequestApplySnapshotChunk)

  #if !swift(>=4.1)
    static func ==(lhs: Tendermint_Abci_Request.OneOf_Value, rhs: Tendermint_Abci_Request.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.echo(let l), .echo(let r)): return l == r
      case (.flush(let l), .flush(let r)): return l == r
      case (.info(let l), .info(let r)): return l == r
      case (.setOption(let l), .setOption(let r)): return l == r
      case (.initChain(let l), .initChain(let r)): return l == r
      case (.query(let l), .query(let r)): return l == r
      case (.beginBlock(let l), .beginBlock(let r)): return l == r
      case (.checkTx(let l), .checkTx(let r)): return l == r
      case (.deliverTx(let l), .deliverTx(let r)): return l == r
      case (.endBlock(let l), .endBlock(let r)): return l == r
      case (.commit(let l), .commit(let r)): return l == r
      case (.listSnapshots(let l), .listSnapshots(let r)): return l == r
      case (.offerSnapshot(let l), .offerSnapshot(let r)): return l == r
      case (.loadSnapshotChunk(let l), .loadSnapshotChunk(let r)): return l == r
      case (.applySnapshotChunk(let l), .applySnapshotChunk(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_RequestEcho {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_RequestFlush {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_RequestInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var version: String = String()

  var blockVersion: UInt64 = 0

  var p2PVersion: UInt64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// nondeterministic
struct Tendermint_Abci_RequestSetOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String = String()

  var value: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_RequestInitChain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  var chainID: String {
    get {return _storage._chainID}
    set {_uniqueStorage()._chainID = newValue}
  }

  var consensusParams: Tendermint_Abci_ConsensusParams {
    get {return _storage._consensusParams ?? Tendermint_Abci_ConsensusParams()}
    set {_uniqueStorage()._consensusParams = newValue}
  }
  /// Returns true if `consensusParams` has been explicitly set.
  var hasConsensusParams: Bool {return _storage._consensusParams != nil}
  /// Clears the value of `consensusParams`. Subsequent reads from it will return its default value.
  mutating func clearConsensusParams() {_uniqueStorage()._consensusParams = nil}

  var validators: [Tendermint_Abci_ValidatorUpdate] {
    get {return _storage._validators}
    set {_uniqueStorage()._validators = newValue}
  }

  var appStateBytes: Data {
    get {return _storage._appStateBytes}
    set {_uniqueStorage()._appStateBytes = newValue}
  }

  var initialHeight: Int64 {
    get {return _storage._initialHeight}
    set {_uniqueStorage()._initialHeight = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_RequestQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: Data = SwiftProtobuf.Internal.emptyData

  var path: String = String()

  var height: Int64 = 0

  var prove: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_RequestBeginBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var hash: Data {
    get {return _storage._hash}
    set {_uniqueStorage()._hash = newValue}
  }

  var header: Tendermint_Types_Header {
    get {return _storage._header ?? Tendermint_Types_Header()}
    set {_uniqueStorage()._header = newValue}
  }
  /// Returns true if `header` has been explicitly set.
  var hasHeader: Bool {return _storage._header != nil}
  /// Clears the value of `header`. Subsequent reads from it will return its default value.
  mutating func clearHeader() {_uniqueStorage()._header = nil}

  var lastCommitInfo: Tendermint_Abci_LastCommitInfo {
    get {return _storage._lastCommitInfo ?? Tendermint_Abci_LastCommitInfo()}
    set {_uniqueStorage()._lastCommitInfo = newValue}
  }
  /// Returns true if `lastCommitInfo` has been explicitly set.
  var hasLastCommitInfo: Bool {return _storage._lastCommitInfo != nil}
  /// Clears the value of `lastCommitInfo`. Subsequent reads from it will return its default value.
  mutating func clearLastCommitInfo() {_uniqueStorage()._lastCommitInfo = nil}

  var byzantineValidators: [Tendermint_Abci_Evidence] {
    get {return _storage._byzantineValidators}
    set {_uniqueStorage()._byzantineValidators = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_RequestCheckTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tx: Data = SwiftProtobuf.Internal.emptyData

  var type: Tendermint_Abci_CheckTxType = .new

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_RequestDeliverTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tx: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_RequestEndBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_RequestCommit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// lists available snapshots
struct Tendermint_Abci_RequestListSnapshots {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// offers a snapshot to the application
struct Tendermint_Abci_RequestOfferSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// snapshot offered by peers
  var snapshot: Tendermint_Abci_Snapshot {
    get {return _storage._snapshot ?? Tendermint_Abci_Snapshot()}
    set {_uniqueStorage()._snapshot = newValue}
  }
  /// Returns true if `snapshot` has been explicitly set.
  var hasSnapshot: Bool {return _storage._snapshot != nil}
  /// Clears the value of `snapshot`. Subsequent reads from it will return its default value.
  mutating func clearSnapshot() {_uniqueStorage()._snapshot = nil}

  /// light client-verified app hash for snapshot height
  var appHash: Data {
    get {return _storage._appHash}
    set {_uniqueStorage()._appHash = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// loads a snapshot chunk
struct Tendermint_Abci_RequestLoadSnapshotChunk {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: UInt64 = 0

  var format: UInt32 = 0

  var chunk: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Applies a snapshot chunk
struct Tendermint_Abci_RequestApplySnapshotChunk {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var index: UInt32 = 0

  var chunk: Data = SwiftProtobuf.Internal.emptyData

  var sender: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_Response {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var value: OneOf_Value? {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var exception: Tendermint_Abci_ResponseException {
    get {
      if case .exception(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseException()
    }
    set {_uniqueStorage()._value = .exception(newValue)}
  }

  var echo: Tendermint_Abci_ResponseEcho {
    get {
      if case .echo(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseEcho()
    }
    set {_uniqueStorage()._value = .echo(newValue)}
  }

  var flush: Tendermint_Abci_ResponseFlush {
    get {
      if case .flush(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseFlush()
    }
    set {_uniqueStorage()._value = .flush(newValue)}
  }

  var info: Tendermint_Abci_ResponseInfo {
    get {
      if case .info(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseInfo()
    }
    set {_uniqueStorage()._value = .info(newValue)}
  }

  var setOption: Tendermint_Abci_ResponseSetOption {
    get {
      if case .setOption(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseSetOption()
    }
    set {_uniqueStorage()._value = .setOption(newValue)}
  }

  var initChain: Tendermint_Abci_ResponseInitChain {
    get {
      if case .initChain(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseInitChain()
    }
    set {_uniqueStorage()._value = .initChain(newValue)}
  }

  var query: Tendermint_Abci_ResponseQuery {
    get {
      if case .query(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseQuery()
    }
    set {_uniqueStorage()._value = .query(newValue)}
  }

  var beginBlock: Tendermint_Abci_ResponseBeginBlock {
    get {
      if case .beginBlock(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseBeginBlock()
    }
    set {_uniqueStorage()._value = .beginBlock(newValue)}
  }

  var checkTx: Tendermint_Abci_ResponseCheckTx {
    get {
      if case .checkTx(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseCheckTx()
    }
    set {_uniqueStorage()._value = .checkTx(newValue)}
  }

  var deliverTx: Tendermint_Abci_ResponseDeliverTx {
    get {
      if case .deliverTx(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseDeliverTx()
    }
    set {_uniqueStorage()._value = .deliverTx(newValue)}
  }

  var endBlock: Tendermint_Abci_ResponseEndBlock {
    get {
      if case .endBlock(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseEndBlock()
    }
    set {_uniqueStorage()._value = .endBlock(newValue)}
  }

  var commit: Tendermint_Abci_ResponseCommit {
    get {
      if case .commit(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseCommit()
    }
    set {_uniqueStorage()._value = .commit(newValue)}
  }

  var listSnapshots: Tendermint_Abci_ResponseListSnapshots {
    get {
      if case .listSnapshots(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseListSnapshots()
    }
    set {_uniqueStorage()._value = .listSnapshots(newValue)}
  }

  var offerSnapshot: Tendermint_Abci_ResponseOfferSnapshot {
    get {
      if case .offerSnapshot(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseOfferSnapshot()
    }
    set {_uniqueStorage()._value = .offerSnapshot(newValue)}
  }

  var loadSnapshotChunk: Tendermint_Abci_ResponseLoadSnapshotChunk {
    get {
      if case .loadSnapshotChunk(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseLoadSnapshotChunk()
    }
    set {_uniqueStorage()._value = .loadSnapshotChunk(newValue)}
  }

  var applySnapshotChunk: Tendermint_Abci_ResponseApplySnapshotChunk {
    get {
      if case .applySnapshotChunk(let v)? = _storage._value {return v}
      return Tendermint_Abci_ResponseApplySnapshotChunk()
    }
    set {_uniqueStorage()._value = .applySnapshotChunk(newValue)}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum OneOf_Value: Equatable {
    case exception(Tendermint_Abci_ResponseException)
    case echo(Tendermint_Abci_ResponseEcho)
    case flush(Tendermint_Abci_ResponseFlush)
    case info(Tendermint_Abci_ResponseInfo)
    case setOption(Tendermint_Abci_ResponseSetOption)
    case initChain(Tendermint_Abci_ResponseInitChain)
    case query(Tendermint_Abci_ResponseQuery)
    case beginBlock(Tendermint_Abci_ResponseBeginBlock)
    case checkTx(Tendermint_Abci_ResponseCheckTx)
    case deliverTx(Tendermint_Abci_ResponseDeliverTx)
    case endBlock(Tendermint_Abci_ResponseEndBlock)
    case commit(Tendermint_Abci_ResponseCommit)
    case listSnapshots(Tendermint_Abci_ResponseListSnapshots)
    case offerSnapshot(Tendermint_Abci_ResponseOfferSnapshot)
    case loadSnapshotChunk(Tendermint_Abci_ResponseLoadSnapshotChunk)
    case applySnapshotChunk(Tendermint_Abci_ResponseApplySnapshotChunk)

  #if !swift(>=4.1)
    static func ==(lhs: Tendermint_Abci_Response.OneOf_Value, rhs: Tendermint_Abci_Response.OneOf_Value) -> Bool {
      switch (lhs, rhs) {
      case (.exception(let l), .exception(let r)): return l == r
      case (.echo(let l), .echo(let r)): return l == r
      case (.flush(let l), .flush(let r)): return l == r
      case (.info(let l), .info(let r)): return l == r
      case (.setOption(let l), .setOption(let r)): return l == r
      case (.initChain(let l), .initChain(let r)): return l == r
      case (.query(let l), .query(let r)): return l == r
      case (.beginBlock(let l), .beginBlock(let r)): return l == r
      case (.checkTx(let l), .checkTx(let r)): return l == r
      case (.deliverTx(let l), .deliverTx(let r)): return l == r
      case (.endBlock(let l), .endBlock(let r)): return l == r
      case (.commit(let l), .commit(let r)): return l == r
      case (.listSnapshots(let l), .listSnapshots(let r)): return l == r
      case (.offerSnapshot(let l), .offerSnapshot(let r)): return l == r
      case (.loadSnapshotChunk(let l), .loadSnapshotChunk(let r)): return l == r
      case (.applySnapshotChunk(let l), .applySnapshotChunk(let r)): return l == r
      default: return false
      }
    }
  #endif
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// nondeterministic
struct Tendermint_Abci_ResponseException {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var error: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseEcho {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseFlush {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: String = String()

  var version: String = String()

  var appVersion: UInt64 = 0

  var lastBlockHeight: Int64 = 0

  var lastBlockAppHash: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// nondeterministic
struct Tendermint_Abci_ResponseSetOption {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: UInt32 = 0

  /// bytes data = 2;
  var log: String = String()

  var info: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseInitChain {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var consensusParams: Tendermint_Abci_ConsensusParams {
    get {return _storage._consensusParams ?? Tendermint_Abci_ConsensusParams()}
    set {_uniqueStorage()._consensusParams = newValue}
  }
  /// Returns true if `consensusParams` has been explicitly set.
  var hasConsensusParams: Bool {return _storage._consensusParams != nil}
  /// Clears the value of `consensusParams`. Subsequent reads from it will return its default value.
  mutating func clearConsensusParams() {_uniqueStorage()._consensusParams = nil}

  var validators: [Tendermint_Abci_ValidatorUpdate] {
    get {return _storage._validators}
    set {_uniqueStorage()._validators = newValue}
  }

  var appHash: Data {
    get {return _storage._appHash}
    set {_uniqueStorage()._appHash = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_ResponseQuery {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: UInt32 {
    get {return _storage._code}
    set {_uniqueStorage()._code = newValue}
  }

  /// bytes data = 2; // use "value" instead.
  var log: String {
    get {return _storage._log}
    set {_uniqueStorage()._log = newValue}
  }

  /// nondeterministic
  var info: String {
    get {return _storage._info}
    set {_uniqueStorage()._info = newValue}
  }

  var index: Int64 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  var key: Data {
    get {return _storage._key}
    set {_uniqueStorage()._key = newValue}
  }

  var value: Data {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  var proofOps: Tendermint_Crypto_ProofOps {
    get {return _storage._proofOps ?? Tendermint_Crypto_ProofOps()}
    set {_uniqueStorage()._proofOps = newValue}
  }
  /// Returns true if `proofOps` has been explicitly set.
  var hasProofOps: Bool {return _storage._proofOps != nil}
  /// Clears the value of `proofOps`. Subsequent reads from it will return its default value.
  mutating func clearProofOps() {_uniqueStorage()._proofOps = nil}

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var codespace: String {
    get {return _storage._codespace}
    set {_uniqueStorage()._codespace = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_ResponseBeginBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var events: [Tendermint_Abci_Event] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseCheckTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: UInt32 = 0

  var data: Data = SwiftProtobuf.Internal.emptyData

  /// nondeterministic
  var log: String = String()

  /// nondeterministic
  var info: String = String()

  var gasWanted: Int64 = 0

  var gasUsed: Int64 = 0

  var events: [Tendermint_Abci_Event] = []

  var codespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseDeliverTx {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var code: UInt32 = 0

  var data: Data = SwiftProtobuf.Internal.emptyData

  /// nondeterministic
  var log: String = String()

  /// nondeterministic
  var info: String = String()

  var gasWanted: Int64 = 0

  var gasUsed: Int64 = 0

  var events: [Tendermint_Abci_Event] = []

  var codespace: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseEndBlock {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validatorUpdates: [Tendermint_Abci_ValidatorUpdate] {
    get {return _storage._validatorUpdates}
    set {_uniqueStorage()._validatorUpdates = newValue}
  }

  var consensusParamUpdates: Tendermint_Abci_ConsensusParams {
    get {return _storage._consensusParamUpdates ?? Tendermint_Abci_ConsensusParams()}
    set {_uniqueStorage()._consensusParamUpdates = newValue}
  }
  /// Returns true if `consensusParamUpdates` has been explicitly set.
  var hasConsensusParamUpdates: Bool {return _storage._consensusParamUpdates != nil}
  /// Clears the value of `consensusParamUpdates`. Subsequent reads from it will return its default value.
  mutating func clearConsensusParamUpdates() {_uniqueStorage()._consensusParamUpdates = nil}

  var events: [Tendermint_Abci_Event] {
    get {return _storage._events}
    set {_uniqueStorage()._events = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_ResponseCommit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// reserve 1
  var data: Data = SwiftProtobuf.Internal.emptyData

  var retainHeight: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseListSnapshots {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var snapshots: [Tendermint_Abci_Snapshot] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseOfferSnapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Tendermint_Abci_ResponseOfferSnapshot.Result = .unknown

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result, abort all snapshot restoration
    case unknown // = 0

    /// Snapshot accepted, apply chunks
    case accept // = 1

    /// Abort all snapshot restoration
    case abort // = 2

    /// Reject this specific snapshot, try others
    case reject // = 3

    /// Reject all snapshots of this format, try others
    case rejectFormat // = 4

    /// Reject all snapshots from the sender(s), try others
    case rejectSender // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .accept
      case 2: self = .abort
      case 3: self = .reject
      case 4: self = .rejectFormat
      case 5: self = .rejectSender
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .accept: return 1
      case .abort: return 2
      case .reject: return 3
      case .rejectFormat: return 4
      case .rejectSender: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Tendermint_Abci_ResponseOfferSnapshot.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tendermint_Abci_ResponseOfferSnapshot.Result] = [
    .unknown,
    .accept,
    .abort,
    .reject,
    .rejectFormat,
    .rejectSender,
  ]
}

#endif  // swift(>=4.2)

struct Tendermint_Abci_ResponseLoadSnapshotChunk {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chunk: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_ResponseApplySnapshotChunk {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var result: Tendermint_Abci_ResponseApplySnapshotChunk.Result = .unknown

  /// Chunks to refetch and reapply
  var refetchChunks: [UInt32] = []

  /// Chunk senders to reject and ban
  var rejectSenders: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Result: SwiftProtobuf.Enum {
    typealias RawValue = Int

    /// Unknown result, abort all snapshot restoration
    case unknown // = 0

    /// Chunk successfully accepted
    case accept // = 1

    /// Abort all snapshot restoration
    case abort // = 2

    /// Retry chunk (combine with refetch and reject)
    case retry // = 3

    /// Retry snapshot (combine with refetch and reject)
    case retrySnapshot // = 4

    /// Reject this snapshot, try others
    case rejectSnapshot // = 5
    case UNRECOGNIZED(Int)

    init() {
      self = .unknown
    }

    init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .unknown
      case 1: self = .accept
      case 2: self = .abort
      case 3: self = .retry
      case 4: self = .retrySnapshot
      case 5: self = .rejectSnapshot
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    var rawValue: Int {
      switch self {
      case .unknown: return 0
      case .accept: return 1
      case .abort: return 2
      case .retry: return 3
      case .retrySnapshot: return 4
      case .rejectSnapshot: return 5
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  init() {}
}

#if swift(>=4.2)

extension Tendermint_Abci_ResponseApplySnapshotChunk.Result: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static var allCases: [Tendermint_Abci_ResponseApplySnapshotChunk.Result] = [
    .unknown,
    .accept,
    .abort,
    .retry,
    .retrySnapshot,
    .rejectSnapshot,
  ]
}

#endif  // swift(>=4.2)

/// ConsensusParams contains all consensus-relevant parameters
///
/// that can be adjusted by the abci app
struct Tendermint_Abci_ConsensusParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var block: Tendermint_Abci_BlockParams {
    get {return _storage._block ?? Tendermint_Abci_BlockParams()}
    set {_uniqueStorage()._block = newValue}
  }
  /// Returns true if `block` has been explicitly set.
  var hasBlock: Bool {return _storage._block != nil}
  /// Clears the value of `block`. Subsequent reads from it will return its default value.
  mutating func clearBlock() {_uniqueStorage()._block = nil}

  var evidence: Tendermint_Types_EvidenceParams {
    get {return _storage._evidence ?? Tendermint_Types_EvidenceParams()}
    set {_uniqueStorage()._evidence = newValue}
  }
  /// Returns true if `evidence` has been explicitly set.
  var hasEvidence: Bool {return _storage._evidence != nil}
  /// Clears the value of `evidence`. Subsequent reads from it will return its default value.
  mutating func clearEvidence() {_uniqueStorage()._evidence = nil}

  var validator: Tendermint_Types_ValidatorParams {
    get {return _storage._validator ?? Tendermint_Types_ValidatorParams()}
    set {_uniqueStorage()._validator = newValue}
  }
  /// Returns true if `validator` has been explicitly set.
  var hasValidator: Bool {return _storage._validator != nil}
  /// Clears the value of `validator`. Subsequent reads from it will return its default value.
  mutating func clearValidator() {_uniqueStorage()._validator = nil}

  var version: Tendermint_Types_VersionParams {
    get {return _storage._version ?? Tendermint_Types_VersionParams()}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {_uniqueStorage()._version = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// BlockParams contains limits on the block size.
struct Tendermint_Abci_BlockParams {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Note: must be greater than 0
  var maxBytes: Int64 = 0

  /// Note: must be greater or equal to -1
  var maxGas: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Tendermint_Abci_LastCommitInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var round: Int32 = 0

  var votes: [Tendermint_Abci_VoteInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// Event allows application developers to attach additional information to
///
/// ResponseBeginBlock, ResponseEndBlock, ResponseCheckTx and ResponseDeliverTx.
///
/// Later, transactions may be queried using these events.
struct Tendermint_Abci_Event {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: String = String()

  var attributes: [Tendermint_Abci_EventAttribute] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// EventAttribute is a single key-value pair, associated with an event.
struct Tendermint_Abci_EventAttribute {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: Data = SwiftProtobuf.Internal.emptyData

  var value: Data = SwiftProtobuf.Internal.emptyData

  /// nondeterministic
  var index: Bool = false

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// TxResult contains results of executing the transaction.
///
///
///
/// One usage is indexing transaction results.
struct Tendermint_Abci_TxResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  var index: UInt32 {
    get {return _storage._index}
    set {_uniqueStorage()._index = newValue}
  }

  var tx: Data {
    get {return _storage._tx}
    set {_uniqueStorage()._tx = newValue}
  }

  var result: Tendermint_Abci_ResponseDeliverTx {
    get {return _storage._result ?? Tendermint_Abci_ResponseDeliverTx()}
    set {_uniqueStorage()._result = newValue}
  }
  /// Returns true if `result` has been explicitly set.
  var hasResult: Bool {return _storage._result != nil}
  /// Clears the value of `result`. Subsequent reads from it will return its default value.
  mutating func clearResult() {_uniqueStorage()._result = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Validator
struct Tendermint_Abci_Validator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The first 20 bytes of SHA256(public key)
  var address: Data = SwiftProtobuf.Internal.emptyData

  /// PubKey pub_key = 2 [(gogoproto.nullable)=false];
  var power: Int64 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// ValidatorUpdate
struct Tendermint_Abci_ValidatorUpdate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var pubKey: Tendermint_Crypto_PublicKey {
    get {return _storage._pubKey ?? Tendermint_Crypto_PublicKey()}
    set {_uniqueStorage()._pubKey = newValue}
  }
  /// Returns true if `pubKey` has been explicitly set.
  var hasPubKey: Bool {return _storage._pubKey != nil}
  /// Clears the value of `pubKey`. Subsequent reads from it will return its default value.
  mutating func clearPubKey() {_uniqueStorage()._pubKey = nil}

  var power: Int64 {
    get {return _storage._power}
    set {_uniqueStorage()._power = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// VoteInfo
struct Tendermint_Abci_VoteInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var validator: Tendermint_Abci_Validator {
    get {return _storage._validator ?? Tendermint_Abci_Validator()}
    set {_uniqueStorage()._validator = newValue}
  }
  /// Returns true if `validator` has been explicitly set.
  var hasValidator: Bool {return _storage._validator != nil}
  /// Clears the value of `validator`. Subsequent reads from it will return its default value.
  mutating func clearValidator() {_uniqueStorage()._validator = nil}

  var signedLastBlock: Bool {
    get {return _storage._signedLastBlock}
    set {_uniqueStorage()._signedLastBlock = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_Evidence {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var type: Tendermint_Abci_EvidenceType {
    get {return _storage._type}
    set {_uniqueStorage()._type = newValue}
  }

  /// The offending validator
  var validator: Tendermint_Abci_Validator {
    get {return _storage._validator ?? Tendermint_Abci_Validator()}
    set {_uniqueStorage()._validator = newValue}
  }
  /// Returns true if `validator` has been explicitly set.
  var hasValidator: Bool {return _storage._validator != nil}
  /// Clears the value of `validator`. Subsequent reads from it will return its default value.
  mutating func clearValidator() {_uniqueStorage()._validator = nil}

  /// The height when the offense occurred 
  var height: Int64 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  /// The corresponding time where the offense occurred
  var time: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._time ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  /// Total voting power of the validator set in case the ABCI application does
  ///
  /// not store historical validators.
  ///
  /// https://github.com/tendermint/tendermint/issues/4581
  var totalVotingPower: Int64 {
    get {return _storage._totalVotingPower}
    set {_uniqueStorage()._totalVotingPower = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Tendermint_Abci_Snapshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The height at which the snapshot was taken
  var height: UInt64 = 0

  /// The application-specific snapshot format
  var format: UInt32 = 0

  /// Number of chunks in the snapshot
  var chunks: UInt32 = 0

  /// Arbitrary snapshot hash, equal only if identical
  var hash: Data = SwiftProtobuf.Internal.emptyData

  /// Arbitrary application metadata
  var metadata: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "tendermint.abci"

extension Tendermint_Abci_CheckTxType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NEW"),
    1: .same(proto: "RECHECK"),
  ]
}

extension Tendermint_Abci_EvidenceType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "DUPLICATE_VOTE"),
    2: .same(proto: "LIGHT_CLIENT_ATTACK"),
  ]
}

extension Tendermint_Abci_Request: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Request"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "echo"),
    2: .same(proto: "flush"),
    3: .same(proto: "info"),
    4: .standard(proto: "set_option"),
    5: .standard(proto: "init_chain"),
    6: .same(proto: "query"),
    7: .standard(proto: "begin_block"),
    8: .standard(proto: "check_tx"),
    9: .standard(proto: "deliver_tx"),
    10: .standard(proto: "end_block"),
    11: .same(proto: "commit"),
    12: .standard(proto: "list_snapshots"),
    13: .standard(proto: "offer_snapshot"),
    14: .standard(proto: "load_snapshot_chunk"),
    15: .standard(proto: "apply_snapshot_chunk"),
  ]

  fileprivate class _StorageClass {
    var _value: Tendermint_Abci_Request.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Tendermint_Abci_RequestEcho?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .echo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .echo(v)}
        case 2:
          var v: Tendermint_Abci_RequestFlush?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .flush(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .flush(v)}
        case 3:
          var v: Tendermint_Abci_RequestInfo?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .info(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .info(v)}
        case 4:
          var v: Tendermint_Abci_RequestSetOption?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .setOption(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .setOption(v)}
        case 5:
          var v: Tendermint_Abci_RequestInitChain?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .initChain(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .initChain(v)}
        case 6:
          var v: Tendermint_Abci_RequestQuery?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .query(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .query(v)}
        case 7:
          var v: Tendermint_Abci_RequestBeginBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .beginBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .beginBlock(v)}
        case 8:
          var v: Tendermint_Abci_RequestCheckTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .checkTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .checkTx(v)}
        case 9:
          var v: Tendermint_Abci_RequestDeliverTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .deliverTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .deliverTx(v)}
        case 10:
          var v: Tendermint_Abci_RequestEndBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .endBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .endBlock(v)}
        case 11:
          var v: Tendermint_Abci_RequestCommit?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .commit(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .commit(v)}
        case 12:
          var v: Tendermint_Abci_RequestListSnapshots?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .listSnapshots(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .listSnapshots(v)}
        case 13:
          var v: Tendermint_Abci_RequestOfferSnapshot?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .offerSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .offerSnapshot(v)}
        case 14:
          var v: Tendermint_Abci_RequestLoadSnapshotChunk?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .loadSnapshotChunk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .loadSnapshotChunk(v)}
        case 15:
          var v: Tendermint_Abci_RequestApplySnapshotChunk?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .applySnapshotChunk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .applySnapshotChunk(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .echo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .flush(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .info(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .setOption(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .initChain(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .query(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .beginBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .checkTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .deliverTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .endBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .commit(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .listSnapshots(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .offerSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .loadSnapshotChunk(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .applySnapshotChunk(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_Request, rhs: Tendermint_Abci_Request) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestEcho: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestEcho"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestEcho, rhs: Tendermint_Abci_RequestEcho) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestFlush: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestFlush"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestFlush, rhs: Tendermint_Abci_RequestFlush) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "version"),
    2: .standard(proto: "block_version"),
    3: .standard(proto: "p2p_version"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.version)
      case 2: try decoder.decodeSingularUInt64Field(value: &self.blockVersion)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.p2PVersion)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 1)
    }
    if self.blockVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.blockVersion, fieldNumber: 2)
    }
    if self.p2PVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.p2PVersion, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestInfo, rhs: Tendermint_Abci_RequestInfo) -> Bool {
    if lhs.version != rhs.version {return false}
    if lhs.blockVersion != rhs.blockVersion {return false}
    if lhs.p2PVersion != rhs.p2PVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestSetOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestSetOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.key)
      case 2: try decoder.decodeSingularStringField(value: &self.value)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularStringField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularStringField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestSetOption, rhs: Tendermint_Abci_RequestSetOption) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestInitChain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestInitChain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .standard(proto: "chain_id"),
    3: .standard(proto: "consensus_params"),
    4: .same(proto: "validators"),
    5: .standard(proto: "app_state_bytes"),
    6: .standard(proto: "initial_height"),
  ]

  fileprivate class _StorageClass {
    var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _chainID: String = String()
    var _consensusParams: Tendermint_Abci_ConsensusParams? = nil
    var _validators: [Tendermint_Abci_ValidatorUpdate] = []
    var _appStateBytes: Data = SwiftProtobuf.Internal.emptyData
    var _initialHeight: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _time = source._time
      _chainID = source._chainID
      _consensusParams = source._consensusParams
      _validators = source._validators
      _appStateBytes = source._appStateBytes
      _initialHeight = source._initialHeight
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._time)
        case 2: try decoder.decodeSingularStringField(value: &_storage._chainID)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._consensusParams)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._validators)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._appStateBytes)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._initialHeight)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._chainID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._chainID, fieldNumber: 2)
      }
      if let v = _storage._consensusParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._validators.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._validators, fieldNumber: 4)
      }
      if !_storage._appStateBytes.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appStateBytes, fieldNumber: 5)
      }
      if _storage._initialHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._initialHeight, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestInitChain, rhs: Tendermint_Abci_RequestInitChain) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._time != rhs_storage._time {return false}
        if _storage._chainID != rhs_storage._chainID {return false}
        if _storage._consensusParams != rhs_storage._consensusParams {return false}
        if _storage._validators != rhs_storage._validators {return false}
        if _storage._appStateBytes != rhs_storage._appStateBytes {return false}
        if _storage._initialHeight != rhs_storage._initialHeight {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "path"),
    3: .same(proto: "height"),
    4: .same(proto: "prove"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.data)
      case 2: try decoder.decodeSingularStringField(value: &self.path)
      case 3: try decoder.decodeSingularInt64Field(value: &self.height)
      case 4: try decoder.decodeSingularBoolField(value: &self.prove)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 1)
    }
    if !self.path.isEmpty {
      try visitor.visitSingularStringField(value: self.path, fieldNumber: 2)
    }
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 3)
    }
    if self.prove != false {
      try visitor.visitSingularBoolField(value: self.prove, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestQuery, rhs: Tendermint_Abci_RequestQuery) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.path != rhs.path {return false}
    if lhs.height != rhs.height {return false}
    if lhs.prove != rhs.prove {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestBeginBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestBeginBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "hash"),
    2: .same(proto: "header"),
    3: .standard(proto: "last_commit_info"),
    4: .standard(proto: "byzantine_validators"),
  ]

  fileprivate class _StorageClass {
    var _hash: Data = SwiftProtobuf.Internal.emptyData
    var _header: Tendermint_Types_Header? = nil
    var _lastCommitInfo: Tendermint_Abci_LastCommitInfo? = nil
    var _byzantineValidators: [Tendermint_Abci_Evidence] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _hash = source._hash
      _header = source._header
      _lastCommitInfo = source._lastCommitInfo
      _byzantineValidators = source._byzantineValidators
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularBytesField(value: &_storage._hash)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._header)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._lastCommitInfo)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._byzantineValidators)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._hash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._hash, fieldNumber: 1)
      }
      if let v = _storage._header {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._lastCommitInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._byzantineValidators.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._byzantineValidators, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestBeginBlock, rhs: Tendermint_Abci_RequestBeginBlock) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._hash != rhs_storage._hash {return false}
        if _storage._header != rhs_storage._header {return false}
        if _storage._lastCommitInfo != rhs_storage._lastCommitInfo {return false}
        if _storage._byzantineValidators != rhs_storage._byzantineValidators {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestCheckTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestCheckTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tx"),
    2: .same(proto: "type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.tx)
      case 2: try decoder.decodeSingularEnumField(value: &self.type)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tx.isEmpty {
      try visitor.visitSingularBytesField(value: self.tx, fieldNumber: 1)
    }
    if self.type != .new {
      try visitor.visitSingularEnumField(value: self.type, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestCheckTx, rhs: Tendermint_Abci_RequestCheckTx) -> Bool {
    if lhs.tx != rhs.tx {return false}
    if lhs.type != rhs.type {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestDeliverTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestDeliverTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "tx"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.tx)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tx.isEmpty {
      try visitor.visitSingularBytesField(value: self.tx, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestDeliverTx, rhs: Tendermint_Abci_RequestDeliverTx) -> Bool {
    if lhs.tx != rhs.tx {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestEndBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestEndBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.height)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularInt64Field(value: self.height, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestEndBlock, rhs: Tendermint_Abci_RequestEndBlock) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestCommit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestCommit"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestCommit, rhs: Tendermint_Abci_RequestCommit) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestListSnapshots: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestListSnapshots"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestListSnapshots, rhs: Tendermint_Abci_RequestListSnapshots) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestOfferSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestOfferSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "snapshot"),
    2: .standard(proto: "app_hash"),
  ]

  fileprivate class _StorageClass {
    var _snapshot: Tendermint_Abci_Snapshot? = nil
    var _appHash: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _snapshot = source._snapshot
      _appHash = source._appHash
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._snapshot)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._appHash)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._snapshot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._appHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appHash, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestOfferSnapshot, rhs: Tendermint_Abci_RequestOfferSnapshot) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._snapshot != rhs_storage._snapshot {return false}
        if _storage._appHash != rhs_storage._appHash {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestLoadSnapshotChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestLoadSnapshotChunk"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "format"),
    3: .same(proto: "chunk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.height)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.format)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.chunk)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 1)
    }
    if self.format != 0 {
      try visitor.visitSingularUInt32Field(value: self.format, fieldNumber: 2)
    }
    if self.chunk != 0 {
      try visitor.visitSingularUInt32Field(value: self.chunk, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestLoadSnapshotChunk, rhs: Tendermint_Abci_RequestLoadSnapshotChunk) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.format != rhs.format {return false}
    if lhs.chunk != rhs.chunk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_RequestApplySnapshotChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".RequestApplySnapshotChunk"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .same(proto: "chunk"),
    3: .same(proto: "sender"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.index)
      case 2: try decoder.decodeSingularBytesField(value: &self.chunk)
      case 3: try decoder.decodeSingularStringField(value: &self.sender)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 1)
    }
    if !self.chunk.isEmpty {
      try visitor.visitSingularBytesField(value: self.chunk, fieldNumber: 2)
    }
    if !self.sender.isEmpty {
      try visitor.visitSingularStringField(value: self.sender, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_RequestApplySnapshotChunk, rhs: Tendermint_Abci_RequestApplySnapshotChunk) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs.chunk != rhs.chunk {return false}
    if lhs.sender != rhs.sender {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_Response: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Response"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "exception"),
    2: .same(proto: "echo"),
    3: .same(proto: "flush"),
    4: .same(proto: "info"),
    5: .standard(proto: "set_option"),
    6: .standard(proto: "init_chain"),
    7: .same(proto: "query"),
    8: .standard(proto: "begin_block"),
    9: .standard(proto: "check_tx"),
    10: .standard(proto: "deliver_tx"),
    11: .standard(proto: "end_block"),
    12: .same(proto: "commit"),
    13: .standard(proto: "list_snapshots"),
    14: .standard(proto: "offer_snapshot"),
    15: .standard(proto: "load_snapshot_chunk"),
    16: .standard(proto: "apply_snapshot_chunk"),
  ]

  fileprivate class _StorageClass {
    var _value: Tendermint_Abci_Response.OneOf_Value?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1:
          var v: Tendermint_Abci_ResponseException?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .exception(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .exception(v)}
        case 2:
          var v: Tendermint_Abci_ResponseEcho?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .echo(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .echo(v)}
        case 3:
          var v: Tendermint_Abci_ResponseFlush?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .flush(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .flush(v)}
        case 4:
          var v: Tendermint_Abci_ResponseInfo?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .info(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .info(v)}
        case 5:
          var v: Tendermint_Abci_ResponseSetOption?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .setOption(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .setOption(v)}
        case 6:
          var v: Tendermint_Abci_ResponseInitChain?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .initChain(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .initChain(v)}
        case 7:
          var v: Tendermint_Abci_ResponseQuery?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .query(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .query(v)}
        case 8:
          var v: Tendermint_Abci_ResponseBeginBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .beginBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .beginBlock(v)}
        case 9:
          var v: Tendermint_Abci_ResponseCheckTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .checkTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .checkTx(v)}
        case 10:
          var v: Tendermint_Abci_ResponseDeliverTx?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .deliverTx(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .deliverTx(v)}
        case 11:
          var v: Tendermint_Abci_ResponseEndBlock?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .endBlock(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .endBlock(v)}
        case 12:
          var v: Tendermint_Abci_ResponseCommit?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .commit(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .commit(v)}
        case 13:
          var v: Tendermint_Abci_ResponseListSnapshots?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .listSnapshots(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .listSnapshots(v)}
        case 14:
          var v: Tendermint_Abci_ResponseOfferSnapshot?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .offerSnapshot(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .offerSnapshot(v)}
        case 15:
          var v: Tendermint_Abci_ResponseLoadSnapshotChunk?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .loadSnapshotChunk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .loadSnapshotChunk(v)}
        case 16:
          var v: Tendermint_Abci_ResponseApplySnapshotChunk?
          if let current = _storage._value {
            try decoder.handleConflictingOneOf()
            if case .applySnapshotChunk(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._value = .applySnapshotChunk(v)}
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      switch _storage._value {
      case .exception(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      case .echo(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .flush(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .info(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .setOption(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case .initChain(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      case .query(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      case .beginBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      case .checkTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      case .deliverTx(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      case .endBlock(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      case .commit(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      case .listSnapshots(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      case .offerSnapshot(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      case .loadSnapshotChunk(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      case .applySnapshotChunk(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_Response, rhs: Tendermint_Abci_Response) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseException: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseException"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "error"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.error)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.error.isEmpty {
      try visitor.visitSingularStringField(value: self.error, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseException, rhs: Tendermint_Abci_ResponseException) -> Bool {
    if lhs.error != rhs.error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseEcho: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseEcho"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "message"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.message)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseEcho, rhs: Tendermint_Abci_ResponseEcho) -> Bool {
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseFlush: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseFlush"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseFlush, rhs: Tendermint_Abci_ResponseFlush) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "data"),
    2: .same(proto: "version"),
    3: .standard(proto: "app_version"),
    4: .standard(proto: "last_block_height"),
    5: .standard(proto: "last_block_app_hash"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.data)
      case 2: try decoder.decodeSingularStringField(value: &self.version)
      case 3: try decoder.decodeSingularUInt64Field(value: &self.appVersion)
      case 4: try decoder.decodeSingularInt64Field(value: &self.lastBlockHeight)
      case 5: try decoder.decodeSingularBytesField(value: &self.lastBlockAppHash)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularStringField(value: self.data, fieldNumber: 1)
    }
    if !self.version.isEmpty {
      try visitor.visitSingularStringField(value: self.version, fieldNumber: 2)
    }
    if self.appVersion != 0 {
      try visitor.visitSingularUInt64Field(value: self.appVersion, fieldNumber: 3)
    }
    if self.lastBlockHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.lastBlockHeight, fieldNumber: 4)
    }
    if !self.lastBlockAppHash.isEmpty {
      try visitor.visitSingularBytesField(value: self.lastBlockAppHash, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseInfo, rhs: Tendermint_Abci_ResponseInfo) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.version != rhs.version {return false}
    if lhs.appVersion != rhs.appVersion {return false}
    if lhs.lastBlockHeight != rhs.lastBlockHeight {return false}
    if lhs.lastBlockAppHash != rhs.lastBlockAppHash {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseSetOption: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseSetOption"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.code)
      case 3: try decoder.decodeSingularStringField(value: &self.log)
      case 4: try decoder.decodeSingularStringField(value: &self.info)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularUInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.log.isEmpty {
      try visitor.visitSingularStringField(value: self.log, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseSetOption, rhs: Tendermint_Abci_ResponseSetOption) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.log != rhs.log {return false}
    if lhs.info != rhs.info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseInitChain: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseInitChain"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "consensus_params"),
    2: .same(proto: "validators"),
    3: .standard(proto: "app_hash"),
  ]

  fileprivate class _StorageClass {
    var _consensusParams: Tendermint_Abci_ConsensusParams? = nil
    var _validators: [Tendermint_Abci_ValidatorUpdate] = []
    var _appHash: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _consensusParams = source._consensusParams
      _validators = source._validators
      _appHash = source._appHash
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._consensusParams)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._validators)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._appHash)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._consensusParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._validators.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._validators, fieldNumber: 2)
      }
      if !_storage._appHash.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._appHash, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseInitChain, rhs: Tendermint_Abci_ResponseInitChain) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._consensusParams != rhs_storage._consensusParams {return false}
        if _storage._validators != rhs_storage._validators {return false}
        if _storage._appHash != rhs_storage._appHash {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseQuery: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseQuery"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
    5: .same(proto: "index"),
    6: .same(proto: "key"),
    7: .same(proto: "value"),
    8: .standard(proto: "proof_ops"),
    9: .same(proto: "height"),
    10: .same(proto: "codespace"),
  ]

  fileprivate class _StorageClass {
    var _code: UInt32 = 0
    var _log: String = String()
    var _info: String = String()
    var _index: Int64 = 0
    var _key: Data = SwiftProtobuf.Internal.emptyData
    var _value: Data = SwiftProtobuf.Internal.emptyData
    var _proofOps: Tendermint_Crypto_ProofOps? = nil
    var _height: Int64 = 0
    var _codespace: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _code = source._code
      _log = source._log
      _info = source._info
      _index = source._index
      _key = source._key
      _value = source._value
      _proofOps = source._proofOps
      _height = source._height
      _codespace = source._codespace
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt32Field(value: &_storage._code)
        case 3: try decoder.decodeSingularStringField(value: &_storage._log)
        case 4: try decoder.decodeSingularStringField(value: &_storage._info)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._index)
        case 6: try decoder.decodeSingularBytesField(value: &_storage._key)
        case 7: try decoder.decodeSingularBytesField(value: &_storage._value)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._proofOps)
        case 9: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 10: try decoder.decodeSingularStringField(value: &_storage._codespace)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._code != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._code, fieldNumber: 1)
      }
      if !_storage._log.isEmpty {
        try visitor.visitSingularStringField(value: _storage._log, fieldNumber: 3)
      }
      if !_storage._info.isEmpty {
        try visitor.visitSingularStringField(value: _storage._info, fieldNumber: 4)
      }
      if _storage._index != 0 {
        try visitor.visitSingularInt64Field(value: _storage._index, fieldNumber: 5)
      }
      if !_storage._key.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._key, fieldNumber: 6)
      }
      if !_storage._value.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._value, fieldNumber: 7)
      }
      if let v = _storage._proofOps {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 9)
      }
      if !_storage._codespace.isEmpty {
        try visitor.visitSingularStringField(value: _storage._codespace, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseQuery, rhs: Tendermint_Abci_ResponseQuery) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._code != rhs_storage._code {return false}
        if _storage._log != rhs_storage._log {return false}
        if _storage._info != rhs_storage._info {return false}
        if _storage._index != rhs_storage._index {return false}
        if _storage._key != rhs_storage._key {return false}
        if _storage._value != rhs_storage._value {return false}
        if _storage._proofOps != rhs_storage._proofOps {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._codespace != rhs_storage._codespace {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseBeginBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseBeginBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "events"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.events)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseBeginBlock, rhs: Tendermint_Abci_ResponseBeginBlock) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseCheckTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseCheckTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "data"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
    5: .same(proto: "gas_wanted"),
    6: .same(proto: "gas_used"),
    7: .same(proto: "events"),
    8: .same(proto: "codespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      case 3: try decoder.decodeSingularStringField(value: &self.log)
      case 4: try decoder.decodeSingularStringField(value: &self.info)
      case 5: try decoder.decodeSingularInt64Field(value: &self.gasWanted)
      case 6: try decoder.decodeSingularInt64Field(value: &self.gasUsed)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.events)
      case 8: try decoder.decodeSingularStringField(value: &self.codespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularUInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    if !self.log.isEmpty {
      try visitor.visitSingularStringField(value: self.log, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 4)
    }
    if self.gasWanted != 0 {
      try visitor.visitSingularInt64Field(value: self.gasWanted, fieldNumber: 5)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularInt64Field(value: self.gasUsed, fieldNumber: 6)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 7)
    }
    if !self.codespace.isEmpty {
      try visitor.visitSingularStringField(value: self.codespace, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseCheckTx, rhs: Tendermint_Abci_ResponseCheckTx) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.data != rhs.data {return false}
    if lhs.log != rhs.log {return false}
    if lhs.info != rhs.info {return false}
    if lhs.gasWanted != rhs.gasWanted {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.events != rhs.events {return false}
    if lhs.codespace != rhs.codespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseDeliverTx: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseDeliverTx"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "data"),
    3: .same(proto: "log"),
    4: .same(proto: "info"),
    5: .same(proto: "gas_wanted"),
    6: .same(proto: "gas_used"),
    7: .same(proto: "events"),
    8: .same(proto: "codespace"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt32Field(value: &self.code)
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      case 3: try decoder.decodeSingularStringField(value: &self.log)
      case 4: try decoder.decodeSingularStringField(value: &self.info)
      case 5: try decoder.decodeSingularInt64Field(value: &self.gasWanted)
      case 6: try decoder.decodeSingularInt64Field(value: &self.gasUsed)
      case 7: try decoder.decodeRepeatedMessageField(value: &self.events)
      case 8: try decoder.decodeSingularStringField(value: &self.codespace)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.code != 0 {
      try visitor.visitSingularUInt32Field(value: self.code, fieldNumber: 1)
    }
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    if !self.log.isEmpty {
      try visitor.visitSingularStringField(value: self.log, fieldNumber: 3)
    }
    if !self.info.isEmpty {
      try visitor.visitSingularStringField(value: self.info, fieldNumber: 4)
    }
    if self.gasWanted != 0 {
      try visitor.visitSingularInt64Field(value: self.gasWanted, fieldNumber: 5)
    }
    if self.gasUsed != 0 {
      try visitor.visitSingularInt64Field(value: self.gasUsed, fieldNumber: 6)
    }
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 7)
    }
    if !self.codespace.isEmpty {
      try visitor.visitSingularStringField(value: self.codespace, fieldNumber: 8)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseDeliverTx, rhs: Tendermint_Abci_ResponseDeliverTx) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.data != rhs.data {return false}
    if lhs.log != rhs.log {return false}
    if lhs.info != rhs.info {return false}
    if lhs.gasWanted != rhs.gasWanted {return false}
    if lhs.gasUsed != rhs.gasUsed {return false}
    if lhs.events != rhs.events {return false}
    if lhs.codespace != rhs.codespace {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseEndBlock: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseEndBlock"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "validator_updates"),
    2: .standard(proto: "consensus_param_updates"),
    3: .same(proto: "events"),
  ]

  fileprivate class _StorageClass {
    var _validatorUpdates: [Tendermint_Abci_ValidatorUpdate] = []
    var _consensusParamUpdates: Tendermint_Abci_ConsensusParams? = nil
    var _events: [Tendermint_Abci_Event] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _validatorUpdates = source._validatorUpdates
      _consensusParamUpdates = source._consensusParamUpdates
      _events = source._events
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._validatorUpdates)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._consensusParamUpdates)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._events)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._validatorUpdates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._validatorUpdates, fieldNumber: 1)
      }
      if let v = _storage._consensusParamUpdates {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._events.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._events, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseEndBlock, rhs: Tendermint_Abci_ResponseEndBlock) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._validatorUpdates != rhs_storage._validatorUpdates {return false}
        if _storage._consensusParamUpdates != rhs_storage._consensusParamUpdates {return false}
        if _storage._events != rhs_storage._events {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseCommit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseCommit"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    2: .same(proto: "data"),
    3: .standard(proto: "retain_height"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 2: try decoder.decodeSingularBytesField(value: &self.data)
      case 3: try decoder.decodeSingularInt64Field(value: &self.retainHeight)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitSingularBytesField(value: self.data, fieldNumber: 2)
    }
    if self.retainHeight != 0 {
      try visitor.visitSingularInt64Field(value: self.retainHeight, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseCommit, rhs: Tendermint_Abci_ResponseCommit) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.retainHeight != rhs.retainHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseListSnapshots: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseListSnapshots"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "snapshots"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.snapshots)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.snapshots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.snapshots, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseListSnapshots, rhs: Tendermint_Abci_ResponseListSnapshots) -> Bool {
    if lhs.snapshots != rhs.snapshots {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseOfferSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseOfferSnapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseOfferSnapshot, rhs: Tendermint_Abci_ResponseOfferSnapshot) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseOfferSnapshot.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ACCEPT"),
    2: .same(proto: "ABORT"),
    3: .same(proto: "REJECT"),
    4: .same(proto: "REJECT_FORMAT"),
    5: .same(proto: "REJECT_SENDER"),
  ]
}

extension Tendermint_Abci_ResponseLoadSnapshotChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseLoadSnapshotChunk"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "chunk"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.chunk)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.chunk.isEmpty {
      try visitor.visitSingularBytesField(value: self.chunk, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseLoadSnapshotChunk, rhs: Tendermint_Abci_ResponseLoadSnapshotChunk) -> Bool {
    if lhs.chunk != rhs.chunk {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseApplySnapshotChunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ResponseApplySnapshotChunk"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
    2: .standard(proto: "refetch_chunks"),
    3: .standard(proto: "reject_senders"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self.result)
      case 2: try decoder.decodeRepeatedUInt32Field(value: &self.refetchChunks)
      case 3: try decoder.decodeRepeatedStringField(value: &self.rejectSenders)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.result != .unknown {
      try visitor.visitSingularEnumField(value: self.result, fieldNumber: 1)
    }
    if !self.refetchChunks.isEmpty {
      try visitor.visitPackedUInt32Field(value: self.refetchChunks, fieldNumber: 2)
    }
    if !self.rejectSenders.isEmpty {
      try visitor.visitRepeatedStringField(value: self.rejectSenders, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ResponseApplySnapshotChunk, rhs: Tendermint_Abci_ResponseApplySnapshotChunk) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.refetchChunks != rhs.refetchChunks {return false}
    if lhs.rejectSenders != rhs.rejectSenders {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ResponseApplySnapshotChunk.Result: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "ACCEPT"),
    2: .same(proto: "ABORT"),
    3: .same(proto: "RETRY"),
    4: .same(proto: "RETRY_SNAPSHOT"),
    5: .same(proto: "REJECT_SNAPSHOT"),
  ]
}

extension Tendermint_Abci_ConsensusParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsensusParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "block"),
    2: .same(proto: "evidence"),
    3: .same(proto: "validator"),
    4: .same(proto: "version"),
  ]

  fileprivate class _StorageClass {
    var _block: Tendermint_Abci_BlockParams? = nil
    var _evidence: Tendermint_Types_EvidenceParams? = nil
    var _validator: Tendermint_Types_ValidatorParams? = nil
    var _version: Tendermint_Types_VersionParams? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _block = source._block
      _evidence = source._evidence
      _validator = source._validator
      _version = source._version
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._block)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._evidence)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._validator)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._version)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._block {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._evidence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._validator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._version {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ConsensusParams, rhs: Tendermint_Abci_ConsensusParams) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._block != rhs_storage._block {return false}
        if _storage._evidence != rhs_storage._evidence {return false}
        if _storage._validator != rhs_storage._validator {return false}
        if _storage._version != rhs_storage._version {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_BlockParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BlockParams"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_bytes"),
    2: .standard(proto: "max_gas"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.maxBytes)
      case 2: try decoder.decodeSingularInt64Field(value: &self.maxGas)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.maxBytes != 0 {
      try visitor.visitSingularInt64Field(value: self.maxBytes, fieldNumber: 1)
    }
    if self.maxGas != 0 {
      try visitor.visitSingularInt64Field(value: self.maxGas, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_BlockParams, rhs: Tendermint_Abci_BlockParams) -> Bool {
    if lhs.maxBytes != rhs.maxBytes {return false}
    if lhs.maxGas != rhs.maxGas {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_LastCommitInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LastCommitInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "round"),
    2: .same(proto: "votes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.round)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.votes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.round != 0 {
      try visitor.visitSingularInt32Field(value: self.round, fieldNumber: 1)
    }
    if !self.votes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.votes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_LastCommitInfo, rhs: Tendermint_Abci_LastCommitInfo) -> Bool {
    if lhs.round != rhs.round {return false}
    if lhs.votes != rhs.votes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_Event: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Event"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "attributes"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.type)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.attributes)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.type.isEmpty {
      try visitor.visitSingularStringField(value: self.type, fieldNumber: 1)
    }
    if !self.attributes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.attributes, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_Event, rhs: Tendermint_Abci_Event) -> Bool {
    if lhs.type != rhs.type {return false}
    if lhs.attributes != rhs.attributes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_EventAttribute: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EventAttribute"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "key"),
    2: .same(proto: "value"),
    3: .same(proto: "index"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.key)
      case 2: try decoder.decodeSingularBytesField(value: &self.value)
      case 3: try decoder.decodeSingularBoolField(value: &self.index)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.key.isEmpty {
      try visitor.visitSingularBytesField(value: self.key, fieldNumber: 1)
    }
    if !self.value.isEmpty {
      try visitor.visitSingularBytesField(value: self.value, fieldNumber: 2)
    }
    if self.index != false {
      try visitor.visitSingularBoolField(value: self.index, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_EventAttribute, rhs: Tendermint_Abci_EventAttribute) -> Bool {
    if lhs.key != rhs.key {return false}
    if lhs.value != rhs.value {return false}
    if lhs.index != rhs.index {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_TxResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TxResult"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "index"),
    3: .same(proto: "tx"),
    4: .same(proto: "result"),
  ]

  fileprivate class _StorageClass {
    var _height: Int64 = 0
    var _index: UInt32 = 0
    var _tx: Data = SwiftProtobuf.Internal.emptyData
    var _result: Tendermint_Abci_ResponseDeliverTx? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _height = source._height
      _index = source._index
      _tx = source._tx
      _result = source._result
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 2: try decoder.decodeSingularUInt32Field(value: &_storage._index)
        case 3: try decoder.decodeSingularBytesField(value: &_storage._tx)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._result)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 1)
      }
      if _storage._index != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._index, fieldNumber: 2)
      }
      if !_storage._tx.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._tx, fieldNumber: 3)
      }
      if let v = _storage._result {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_TxResult, rhs: Tendermint_Abci_TxResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._height != rhs_storage._height {return false}
        if _storage._index != rhs_storage._index {return false}
        if _storage._tx != rhs_storage._tx {return false}
        if _storage._result != rhs_storage._result {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_Validator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Validator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    3: .same(proto: "power"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.address)
      case 3: try decoder.decodeSingularInt64Field(value: &self.power)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.address.isEmpty {
      try visitor.visitSingularBytesField(value: self.address, fieldNumber: 1)
    }
    if self.power != 0 {
      try visitor.visitSingularInt64Field(value: self.power, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_Validator, rhs: Tendermint_Abci_Validator) -> Bool {
    if lhs.address != rhs.address {return false}
    if lhs.power != rhs.power {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_ValidatorUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidatorUpdate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "pub_key"),
    2: .same(proto: "power"),
  ]

  fileprivate class _StorageClass {
    var _pubKey: Tendermint_Crypto_PublicKey? = nil
    var _power: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _pubKey = source._pubKey
      _power = source._power
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._pubKey)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._power)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._pubKey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._power != 0 {
        try visitor.visitSingularInt64Field(value: _storage._power, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_ValidatorUpdate, rhs: Tendermint_Abci_ValidatorUpdate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._pubKey != rhs_storage._pubKey {return false}
        if _storage._power != rhs_storage._power {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_VoteInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VoteInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "validator"),
    2: .standard(proto: "signed_last_block"),
  ]

  fileprivate class _StorageClass {
    var _validator: Tendermint_Abci_Validator? = nil
    var _signedLastBlock: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _validator = source._validator
      _signedLastBlock = source._signedLastBlock
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._validator)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._signedLastBlock)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._validator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._signedLastBlock != false {
        try visitor.visitSingularBoolField(value: _storage._signedLastBlock, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_VoteInfo, rhs: Tendermint_Abci_VoteInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._validator != rhs_storage._validator {return false}
        if _storage._signedLastBlock != rhs_storage._signedLastBlock {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_Evidence: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Evidence"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "type"),
    2: .same(proto: "validator"),
    3: .same(proto: "height"),
    4: .same(proto: "time"),
    5: .standard(proto: "total_voting_power"),
  ]

  fileprivate class _StorageClass {
    var _type: Tendermint_Abci_EvidenceType = .unknown
    var _validator: Tendermint_Abci_Validator? = nil
    var _height: Int64 = 0
    var _time: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _totalVotingPower: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _type = source._type
      _validator = source._validator
      _height = source._height
      _time = source._time
      _totalVotingPower = source._totalVotingPower
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._type)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._validator)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._height)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._time)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._totalVotingPower)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._type != .unknown {
        try visitor.visitSingularEnumField(value: _storage._type, fieldNumber: 1)
      }
      if let v = _storage._validator {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt64Field(value: _storage._height, fieldNumber: 3)
      }
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._totalVotingPower != 0 {
        try visitor.visitSingularInt64Field(value: _storage._totalVotingPower, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_Evidence, rhs: Tendermint_Abci_Evidence) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._type != rhs_storage._type {return false}
        if _storage._validator != rhs_storage._validator {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._time != rhs_storage._time {return false}
        if _storage._totalVotingPower != rhs_storage._totalVotingPower {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Tendermint_Abci_Snapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Snapshot"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "height"),
    2: .same(proto: "format"),
    3: .same(proto: "chunks"),
    4: .same(proto: "hash"),
    5: .same(proto: "metadata"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.height)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.format)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.chunks)
      case 4: try decoder.decodeSingularBytesField(value: &self.hash)
      case 5: try decoder.decodeSingularBytesField(value: &self.metadata)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.height != 0 {
      try visitor.visitSingularUInt64Field(value: self.height, fieldNumber: 1)
    }
    if self.format != 0 {
      try visitor.visitSingularUInt32Field(value: self.format, fieldNumber: 2)
    }
    if self.chunks != 0 {
      try visitor.visitSingularUInt32Field(value: self.chunks, fieldNumber: 3)
    }
    if !self.hash.isEmpty {
      try visitor.visitSingularBytesField(value: self.hash, fieldNumber: 4)
    }
    if !self.metadata.isEmpty {
      try visitor.visitSingularBytesField(value: self.metadata, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Tendermint_Abci_Snapshot, rhs: Tendermint_Abci_Snapshot) -> Bool {
    if lhs.height != rhs.height {return false}
    if lhs.format != rhs.format {return false}
    if lhs.chunks != rhs.chunks {return false}
    if lhs.hash != rhs.hash {return false}
    if lhs.metadata != rhs.metadata {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
