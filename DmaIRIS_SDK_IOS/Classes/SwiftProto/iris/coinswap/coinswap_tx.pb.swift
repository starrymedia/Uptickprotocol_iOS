// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: coinswap/tx.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgAddLiquidity represents a msg for adding liquidity to a reserve pool
struct Irismod_Coinswap_MsgAddLiquidity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var maxToken: Cosmos_Base_V1beta1_Coin {
    get {return _storage._maxToken ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._maxToken = newValue}
  }
  /// Returns true if `maxToken` has been explicitly set.
  var hasMaxToken: Bool {return _storage._maxToken != nil}
  /// Clears the value of `maxToken`. Subsequent reads from it will return its default value.
  mutating func clearMaxToken() {_uniqueStorage()._maxToken = nil}

  var exactStandardAmt: String {
    get {return _storage._exactStandardAmt}
    set {_uniqueStorage()._exactStandardAmt = newValue}
  }

  var minLiquidity: String {
    get {return _storage._minLiquidity}
    set {_uniqueStorage()._minLiquidity = newValue}
  }

  var deadline: Int64 {
    get {return _storage._deadline}
    set {_uniqueStorage()._deadline = newValue}
  }

  var sender: String {
    get {return _storage._sender}
    set {_uniqueStorage()._sender = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgAddLiquidityResponse defines the Msg/AddLiquidity response type.
struct Irismod_Coinswap_MsgAddLiquidityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mintToken: Cosmos_Base_V1beta1_Coin {
    get {return _storage._mintToken ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._mintToken = newValue}
  }
  /// Returns true if `mintToken` has been explicitly set.
  var hasMintToken: Bool {return _storage._mintToken != nil}
  /// Clears the value of `mintToken`. Subsequent reads from it will return its default value.
  mutating func clearMintToken() {_uniqueStorage()._mintToken = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgRemoveLiquidity - struct for removing liquidity from a reserve pool
struct Irismod_Coinswap_MsgRemoveLiquidity {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var withdrawLiquidity: Cosmos_Base_V1beta1_Coin {
    get {return _storage._withdrawLiquidity ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._withdrawLiquidity = newValue}
  }
  /// Returns true if `withdrawLiquidity` has been explicitly set.
  var hasWithdrawLiquidity: Bool {return _storage._withdrawLiquidity != nil}
  /// Clears the value of `withdrawLiquidity`. Subsequent reads from it will return its default value.
  mutating func clearWithdrawLiquidity() {_uniqueStorage()._withdrawLiquidity = nil}

  var minToken: String {
    get {return _storage._minToken}
    set {_uniqueStorage()._minToken = newValue}
  }

  var minStandardAmt: String {
    get {return _storage._minStandardAmt}
    set {_uniqueStorage()._minStandardAmt = newValue}
  }

  var deadline: Int64 {
    get {return _storage._deadline}
    set {_uniqueStorage()._deadline = newValue}
  }

  var sender: String {
    get {return _storage._sender}
    set {_uniqueStorage()._sender = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgRemoveLiquidityResponse defines the Msg/RemoveLiquidity response type.
struct Irismod_Coinswap_MsgRemoveLiquidityResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var withdrawCoins: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgSwapOrder represents a msg for swap order
struct Irismod_Coinswap_MsgSwapOrder {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var input: Irismod_Coinswap_Input {
    get {return _storage._input ?? Irismod_Coinswap_Input()}
    set {_uniqueStorage()._input = newValue}
  }
  /// Returns true if `input` has been explicitly set.
  var hasInput: Bool {return _storage._input != nil}
  /// Clears the value of `input`. Subsequent reads from it will return its default value.
  mutating func clearInput() {_uniqueStorage()._input = nil}

  var output: Irismod_Coinswap_Output {
    get {return _storage._output ?? Irismod_Coinswap_Output()}
    set {_uniqueStorage()._output = newValue}
  }
  /// Returns true if `output` has been explicitly set.
  var hasOutput: Bool {return _storage._output != nil}
  /// Clears the value of `output`. Subsequent reads from it will return its default value.
  mutating func clearOutput() {_uniqueStorage()._output = nil}

  var deadline: Int64 {
    get {return _storage._deadline}
    set {_uniqueStorage()._deadline = newValue}
  }

  var isBuyOrder: Bool {
    get {return _storage._isBuyOrder}
    set {_uniqueStorage()._isBuyOrder = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgSwapCoinResponse defines the Msg/SwapCoin response type.
struct Irismod_Coinswap_MsgSwapCoinResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.coinswap"

extension Irismod_Coinswap_MsgAddLiquidity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddLiquidity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "max_token"),
    2: .standard(proto: "exact_standard_amt"),
    3: .standard(proto: "min_liquidity"),
    4: .same(proto: "deadline"),
    5: .same(proto: "sender"),
  ]

  fileprivate class _StorageClass {
    var _maxToken: Cosmos_Base_V1beta1_Coin? = nil
    var _exactStandardAmt: String = String()
    var _minLiquidity: String = String()
    var _deadline: Int64 = 0
    var _sender: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _maxToken = source._maxToken
      _exactStandardAmt = source._exactStandardAmt
      _minLiquidity = source._minLiquidity
      _deadline = source._deadline
      _sender = source._sender
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._maxToken)
        case 2: try decoder.decodeSingularStringField(value: &_storage._exactStandardAmt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._minLiquidity)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._deadline)
        case 5: try decoder.decodeSingularStringField(value: &_storage._sender)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._maxToken {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._exactStandardAmt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._exactStandardAmt, fieldNumber: 2)
      }
      if !_storage._minLiquidity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minLiquidity, fieldNumber: 3)
      }
      if _storage._deadline != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deadline, fieldNumber: 4)
      }
      if !_storage._sender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sender, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_MsgAddLiquidity, rhs: Irismod_Coinswap_MsgAddLiquidity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._maxToken != rhs_storage._maxToken {return false}
        if _storage._exactStandardAmt != rhs_storage._exactStandardAmt {return false}
        if _storage._minLiquidity != rhs_storage._minLiquidity {return false}
        if _storage._deadline != rhs_storage._deadline {return false}
        if _storage._sender != rhs_storage._sender {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Coinswap_MsgAddLiquidityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgAddLiquidityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "mint_token"),
  ]

  fileprivate class _StorageClass {
    var _mintToken: Cosmos_Base_V1beta1_Coin? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _mintToken = source._mintToken
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._mintToken)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._mintToken {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_MsgAddLiquidityResponse, rhs: Irismod_Coinswap_MsgAddLiquidityResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._mintToken != rhs_storage._mintToken {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Coinswap_MsgRemoveLiquidity: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveLiquidity"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "withdraw_liquidity"),
    2: .standard(proto: "min_token"),
    3: .standard(proto: "min_standard_amt"),
    4: .same(proto: "deadline"),
    5: .same(proto: "sender"),
  ]

  fileprivate class _StorageClass {
    var _withdrawLiquidity: Cosmos_Base_V1beta1_Coin? = nil
    var _minToken: String = String()
    var _minStandardAmt: String = String()
    var _deadline: Int64 = 0
    var _sender: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _withdrawLiquidity = source._withdrawLiquidity
      _minToken = source._minToken
      _minStandardAmt = source._minStandardAmt
      _deadline = source._deadline
      _sender = source._sender
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._withdrawLiquidity)
        case 2: try decoder.decodeSingularStringField(value: &_storage._minToken)
        case 3: try decoder.decodeSingularStringField(value: &_storage._minStandardAmt)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._deadline)
        case 5: try decoder.decodeSingularStringField(value: &_storage._sender)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._withdrawLiquidity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._minToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minToken, fieldNumber: 2)
      }
      if !_storage._minStandardAmt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minStandardAmt, fieldNumber: 3)
      }
      if _storage._deadline != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deadline, fieldNumber: 4)
      }
      if !_storage._sender.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sender, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_MsgRemoveLiquidity, rhs: Irismod_Coinswap_MsgRemoveLiquidity) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._withdrawLiquidity != rhs_storage._withdrawLiquidity {return false}
        if _storage._minToken != rhs_storage._minToken {return false}
        if _storage._minStandardAmt != rhs_storage._minStandardAmt {return false}
        if _storage._deadline != rhs_storage._deadline {return false}
        if _storage._sender != rhs_storage._sender {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Coinswap_MsgRemoveLiquidityResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgRemoveLiquidityResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "withdraw_coins"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.withdrawCoins)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.withdrawCoins.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.withdrawCoins, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_MsgRemoveLiquidityResponse, rhs: Irismod_Coinswap_MsgRemoveLiquidityResponse) -> Bool {
    if lhs.withdrawCoins != rhs.withdrawCoins {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Coinswap_MsgSwapOrder: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapOrder"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "input"),
    2: .same(proto: "output"),
    3: .same(proto: "deadline"),
    4: .standard(proto: "is_buy_order"),
  ]

  fileprivate class _StorageClass {
    var _input: Irismod_Coinswap_Input? = nil
    var _output: Irismod_Coinswap_Output? = nil
    var _deadline: Int64 = 0
    var _isBuyOrder: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _input = source._input
      _output = source._output
      _deadline = source._deadline
      _isBuyOrder = source._isBuyOrder
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._input)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._output)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._deadline)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._isBuyOrder)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._input {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._output {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._deadline != 0 {
        try visitor.visitSingularInt64Field(value: _storage._deadline, fieldNumber: 3)
      }
      if _storage._isBuyOrder != false {
        try visitor.visitSingularBoolField(value: _storage._isBuyOrder, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_MsgSwapOrder, rhs: Irismod_Coinswap_MsgSwapOrder) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._input != rhs_storage._input {return false}
        if _storage._output != rhs_storage._output {return false}
        if _storage._deadline != rhs_storage._deadline {return false}
        if _storage._isBuyOrder != rhs_storage._isBuyOrder {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Coinswap_MsgSwapCoinResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgSwapCoinResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Coinswap_MsgSwapCoinResponse, rhs: Irismod_Coinswap_MsgSwapCoinResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
