//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: nft/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Irismod_Nft_QueryClient, then call methods of this protocol to make API calls.
internal protocol Irismod_Nft_QueryClientProtocol: GRPCClient {
  func supply(
    _ request: Irismod_Nft_QuerySupplyRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_QuerySupplyRequest, Irismod_Nft_QuerySupplyResponse>

  func owner(
    _ request: Irismod_Nft_QueryOwnerRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_QueryOwnerRequest, Irismod_Nft_QueryOwnerResponse>

  func collection(
    _ request: Irismod_Nft_QueryCollectionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_QueryCollectionRequest, Irismod_Nft_QueryCollectionResponse>

  func denom(
    _ request: Irismod_Nft_QueryDenomRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_QueryDenomRequest, Irismod_Nft_QueryDenomResponse>

  func denoms(
    _ request: Irismod_Nft_QueryDenomsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_QueryDenomsRequest, Irismod_Nft_QueryDenomsResponse>

  func nFT(
    _ request: Irismod_Nft_QueryNFTRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_QueryNFTRequest, Irismod_Nft_QueryNFTResponse>

}

extension Irismod_Nft_QueryClientProtocol {

  /// Supply queries the total supply of a given denom or owner
  ///
  /// - Parameters:
  ///   - request: Request to send to Supply.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func supply(
    _ request: Irismod_Nft_QuerySupplyRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_QuerySupplyRequest, Irismod_Nft_QuerySupplyResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Query/Supply",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Owner queries the NFTs of the specified owner
  ///
  /// - Parameters:
  ///   - request: Request to send to Owner.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func owner(
    _ request: Irismod_Nft_QueryOwnerRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_QueryOwnerRequest, Irismod_Nft_QueryOwnerResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Query/Owner",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Collection queries the NFTs of the specified denom
  ///
  /// - Parameters:
  ///   - request: Request to send to Collection.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func collection(
    _ request: Irismod_Nft_QueryCollectionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_QueryCollectionRequest, Irismod_Nft_QueryCollectionResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Query/Collection",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Denom queries the definition of a given denom
  ///
  /// - Parameters:
  ///   - request: Request to send to Denom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denom(
    _ request: Irismod_Nft_QueryDenomRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_QueryDenomRequest, Irismod_Nft_QueryDenomResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Query/Denom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// Denoms queries all the denoms
  ///
  /// - Parameters:
  ///   - request: Request to send to Denoms.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func denoms(
    _ request: Irismod_Nft_QueryDenomsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_QueryDenomsRequest, Irismod_Nft_QueryDenomsResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Query/Denoms",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// NFT queries the NFT for the given denom and token ID
  ///
  /// - Parameters:
  ///   - request: Request to send to NFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func nFT(
    _ request: Irismod_Nft_QueryNFTRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_QueryNFTRequest, Irismod_Nft_QueryNFTResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Query/NFT",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Irismod_Nft_QueryClient: Irismod_Nft_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the irismod.nft.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Nft_QueryProvider: CallHandlerProvider {
  /// Supply queries the total supply of a given denom or owner
  func supply(request: Irismod_Nft_QuerySupplyRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_QuerySupplyResponse>
  /// Owner queries the NFTs of the specified owner
  func owner(request: Irismod_Nft_QueryOwnerRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_QueryOwnerResponse>
  /// Collection queries the NFTs of the specified denom
  func collection(request: Irismod_Nft_QueryCollectionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_QueryCollectionResponse>
  /// Denom queries the definition of a given denom
  func denom(request: Irismod_Nft_QueryDenomRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_QueryDenomResponse>
  /// Denoms queries all the denoms
  func denoms(request: Irismod_Nft_QueryDenomsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_QueryDenomsResponse>
  /// NFT queries the NFT for the given denom and token ID
  func nFT(request: Irismod_Nft_QueryNFTRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_QueryNFTResponse>
}

extension Irismod_Nft_QueryProvider {
  internal var serviceName: Substring { return "irismod.nft.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Supply":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.supply(request: request, context: context)
        }
      }

    case "Owner":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.owner(request: request, context: context)
        }
      }

    case "Collection":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.collection(request: request, context: context)
        }
      }

    case "Denom":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.denom(request: request, context: context)
        }
      }

    case "Denoms":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.denoms(request: request, context: context)
        }
      }

    case "NFT":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.nFT(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

