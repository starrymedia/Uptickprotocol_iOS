//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: nft/tx.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Irismod_Nft_MsgClient, then call methods of this protocol to make API calls.
internal protocol Irismod_Nft_MsgClientProtocol: GRPCClient {
  func issueDenom(
    _ request: Irismod_Nft_MsgIssueDenom,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_MsgIssueDenom, Irismod_Nft_MsgIssueDenomResponse>

  func mintNFT(
    _ request: Irismod_Nft_MsgMintNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_MsgMintNFT, Irismod_Nft_MsgMintNFTResponse>

  func editNFT(
    _ request: Irismod_Nft_MsgEditNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_MsgEditNFT, Irismod_Nft_MsgEditNFTResponse>

  func transferNFT(
    _ request: Irismod_Nft_MsgTransferNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_MsgTransferNFT, Irismod_Nft_MsgTransferNFTResponse>

  func burnNFT(
    _ request: Irismod_Nft_MsgBurnNFT,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Nft_MsgBurnNFT, Irismod_Nft_MsgBurnNFTResponse>

}

extension Irismod_Nft_MsgClientProtocol {

  /// IssueDenom defines a method for issue a denom.
  ///
  /// - Parameters:
  ///   - request: Request to send to IssueDenom.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func issueDenom(
    _ request: Irismod_Nft_MsgIssueDenom,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_MsgIssueDenom, Irismod_Nft_MsgIssueDenomResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Msg/IssueDenom",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// MintNFT defines a method for mint a new nft
  ///
  /// - Parameters:
  ///   - request: Request to send to MintNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func mintNFT(
    _ request: Irismod_Nft_MsgMintNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_MsgMintNFT, Irismod_Nft_MsgMintNFTResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Msg/MintNFT",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// RefundHTLC defines a method for editing a nft.
  ///
  /// - Parameters:
  ///   - request: Request to send to EditNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func editNFT(
    _ request: Irismod_Nft_MsgEditNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_MsgEditNFT, Irismod_Nft_MsgEditNFTResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Msg/EditNFT",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// TransferNFT defines a method for transferring a nft.
  ///
  /// - Parameters:
  ///   - request: Request to send to TransferNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func transferNFT(
    _ request: Irismod_Nft_MsgTransferNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_MsgTransferNFT, Irismod_Nft_MsgTransferNFTResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Msg/TransferNFT",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// BurnNFT defines a method for burning a nft.
  ///
  /// - Parameters:
  ///   - request: Request to send to BurnNFT.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func burnNFT(
    _ request: Irismod_Nft_MsgBurnNFT,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Nft_MsgBurnNFT, Irismod_Nft_MsgBurnNFTResponse> {
    return self.makeUnaryCall(
      path: "/irismod.nft.Msg/BurnNFT",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Irismod_Nft_MsgClient: Irismod_Nft_MsgClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the irismod.nft.Msg service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Nft_MsgProvider: CallHandlerProvider {
  /// IssueDenom defines a method for issue a denom.
  func issueDenom(request: Irismod_Nft_MsgIssueDenom, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_MsgIssueDenomResponse>
  /// MintNFT defines a method for mint a new nft
  func mintNFT(request: Irismod_Nft_MsgMintNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_MsgMintNFTResponse>
  /// RefundHTLC defines a method for editing a nft.
  func editNFT(request: Irismod_Nft_MsgEditNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_MsgEditNFTResponse>
  /// TransferNFT defines a method for transferring a nft.
  func transferNFT(request: Irismod_Nft_MsgTransferNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_MsgTransferNFTResponse>
  /// BurnNFT defines a method for burning a nft.
  func burnNFT(request: Irismod_Nft_MsgBurnNFT, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Nft_MsgBurnNFTResponse>
}

extension Irismod_Nft_MsgProvider {
  internal var serviceName: Substring { return "irismod.nft.Msg" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "IssueDenom":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.issueDenom(request: request, context: context)
        }
      }

    case "MintNFT":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.mintNFT(request: request, context: context)
        }
      }

    case "EditNFT":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.editNFT(request: request, context: context)
        }
      }

    case "TransferNFT":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.transferNFT(request: request, context: context)
        }
      }

    case "BurnNFT":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.burnNFT(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

