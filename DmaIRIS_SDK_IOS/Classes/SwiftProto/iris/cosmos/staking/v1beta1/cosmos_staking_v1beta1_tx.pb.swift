// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/staking/v1beta1/tx.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// MsgCreateValidator defines a SDK message for creating a new validator.
struct Cosmos_Staking_V1beta1_MsgCreateValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: Cosmos_Staking_V1beta1_Description {
    get {return _storage._description_p ?? Cosmos_Staking_V1beta1_Description()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  var commission: Cosmos_Staking_V1beta1_CommissionRates {
    get {return _storage._commission ?? Cosmos_Staking_V1beta1_CommissionRates()}
    set {_uniqueStorage()._commission = newValue}
  }
  /// Returns true if `commission` has been explicitly set.
  var hasCommission: Bool {return _storage._commission != nil}
  /// Clears the value of `commission`. Subsequent reads from it will return its default value.
  mutating func clearCommission() {_uniqueStorage()._commission = nil}

  var minSelfDelegation: String {
    get {return _storage._minSelfDelegation}
    set {_uniqueStorage()._minSelfDelegation = newValue}
  }

  var delegatorAddress: String {
    get {return _storage._delegatorAddress}
    set {_uniqueStorage()._delegatorAddress = newValue}
  }

  var validatorAddress: String {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  var pubkey: SwiftProtobuf.Google_Protobuf_Any {
    get {return _storage._pubkey ?? SwiftProtobuf.Google_Protobuf_Any()}
    set {_uniqueStorage()._pubkey = newValue}
  }
  /// Returns true if `pubkey` has been explicitly set.
  var hasPubkey: Bool {return _storage._pubkey != nil}
  /// Clears the value of `pubkey`. Subsequent reads from it will return its default value.
  mutating func clearPubkey() {_uniqueStorage()._pubkey = nil}

  var value: Cosmos_Base_V1beta1_Coin {
    get {return _storage._value ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return _storage._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {_uniqueStorage()._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgCreateValidatorResponse defines the Msg/CreateValidator response type.
struct Cosmos_Staking_V1beta1_MsgCreateValidatorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgEditValidator defines a SDK message for editing an existing validator.
struct Cosmos_Staking_V1beta1_MsgEditValidator {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var description_p: Cosmos_Staking_V1beta1_Description {
    get {return _storage._description_p ?? Cosmos_Staking_V1beta1_Description()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  var validatorAddress: String {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  /// We pass a reference to the new commission rate and min self delegation as
  /// it's not mandatory to update. If not updated, the deserialized rate will be
  /// zero with no way to distinguish if an update was intended.
  /// REF: #2373
  var commissionRate: String {
    get {return _storage._commissionRate}
    set {_uniqueStorage()._commissionRate = newValue}
  }

  var minSelfDelegation: String {
    get {return _storage._minSelfDelegation}
    set {_uniqueStorage()._minSelfDelegation = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgEditValidatorResponse defines the Msg/EditValidator response type.
struct Cosmos_Staking_V1beta1_MsgEditValidatorResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgDelegate defines a SDK message for performing a delegation of coins
/// from a delegator to a validator.
struct Cosmos_Staking_V1beta1_MsgDelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String {
    get {return _storage._delegatorAddress}
    set {_uniqueStorage()._delegatorAddress = newValue}
  }

  var validatorAddress: String {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _storage._amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgDelegateResponse defines the Msg/Delegate response type.
struct Cosmos_Staking_V1beta1_MsgDelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// MsgBeginRedelegate defines a SDK message for performing a redelegation
/// of coins from a delegator and source validator to a destination validator.
struct Cosmos_Staking_V1beta1_MsgBeginRedelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String {
    get {return _storage._delegatorAddress}
    set {_uniqueStorage()._delegatorAddress = newValue}
  }

  var validatorSrcAddress: String {
    get {return _storage._validatorSrcAddress}
    set {_uniqueStorage()._validatorSrcAddress = newValue}
  }

  var validatorDstAddress: String {
    get {return _storage._validatorDstAddress}
    set {_uniqueStorage()._validatorDstAddress = newValue}
  }

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _storage._amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgBeginRedelegateResponse defines the Msg/BeginRedelegate response type.
struct Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var completionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._completionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return _storage._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {_uniqueStorage()._completionTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgUndelegate defines a SDK message for performing an undelegation from a
/// delegate and a validator.
struct Cosmos_Staking_V1beta1_MsgUndelegate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var delegatorAddress: String {
    get {return _storage._delegatorAddress}
    set {_uniqueStorage()._delegatorAddress = newValue}
  }

  var validatorAddress: String {
    get {return _storage._validatorAddress}
    set {_uniqueStorage()._validatorAddress = newValue}
  }

  var amount: Cosmos_Base_V1beta1_Coin {
    get {return _storage._amount ?? Cosmos_Base_V1beta1_Coin()}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// MsgUndelegateResponse defines the Msg/Undelegate response type.
struct Cosmos_Staking_V1beta1_MsgUndelegateResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var completionTime: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._completionTime ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return _storage._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {_uniqueStorage()._completionTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.staking.v1beta1"

extension Cosmos_Staking_V1beta1_MsgCreateValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateValidator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .same(proto: "commission"),
    3: .standard(proto: "min_self_delegation"),
    4: .standard(proto: "delegator_address"),
    5: .standard(proto: "validator_address"),
    6: .same(proto: "pubkey"),
    7: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _description_p: Cosmos_Staking_V1beta1_Description? = nil
    var _commission: Cosmos_Staking_V1beta1_CommissionRates? = nil
    var _minSelfDelegation: String = String()
    var _delegatorAddress: String = String()
    var _validatorAddress: String = String()
    var _pubkey: SwiftProtobuf.Google_Protobuf_Any? = nil
    var _value: Cosmos_Base_V1beta1_Coin? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _commission = source._commission
      _minSelfDelegation = source._minSelfDelegation
      _delegatorAddress = source._delegatorAddress
      _validatorAddress = source._validatorAddress
      _pubkey = source._pubkey
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._description_p)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._commission)
        case 3: try decoder.decodeSingularStringField(value: &_storage._minSelfDelegation)
        case 4: try decoder.decodeSingularStringField(value: &_storage._delegatorAddress)
        case 5: try decoder.decodeSingularStringField(value: &_storage._validatorAddress)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._pubkey)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._value)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if let v = _storage._commission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._minSelfDelegation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minSelfDelegation, fieldNumber: 3)
      }
      if !_storage._delegatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delegatorAddress, fieldNumber: 4)
      }
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorAddress, fieldNumber: 5)
      }
      if let v = _storage._pubkey {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if let v = _storage._value {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgCreateValidator, rhs: Cosmos_Staking_V1beta1_MsgCreateValidator) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._commission != rhs_storage._commission {return false}
        if _storage._minSelfDelegation != rhs_storage._minSelfDelegation {return false}
        if _storage._delegatorAddress != rhs_storage._delegatorAddress {return false}
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._pubkey != rhs_storage._pubkey {return false}
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgCreateValidatorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgCreateValidatorResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgCreateValidatorResponse, rhs: Cosmos_Staking_V1beta1_MsgCreateValidatorResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgEditValidator: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditValidator"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "description"),
    2: .standard(proto: "validator_address"),
    3: .standard(proto: "commission_rate"),
    4: .standard(proto: "min_self_delegation"),
  ]

  fileprivate class _StorageClass {
    var _description_p: Cosmos_Staking_V1beta1_Description? = nil
    var _validatorAddress: String = String()
    var _commissionRate: String = String()
    var _minSelfDelegation: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _description_p = source._description_p
      _validatorAddress = source._validatorAddress
      _commissionRate = source._commissionRate
      _minSelfDelegation = source._minSelfDelegation
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._description_p)
        case 2: try decoder.decodeSingularStringField(value: &_storage._validatorAddress)
        case 3: try decoder.decodeSingularStringField(value: &_storage._commissionRate)
        case 4: try decoder.decodeSingularStringField(value: &_storage._minSelfDelegation)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._description_p {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorAddress, fieldNumber: 2)
      }
      if !_storage._commissionRate.isEmpty {
        try visitor.visitSingularStringField(value: _storage._commissionRate, fieldNumber: 3)
      }
      if !_storage._minSelfDelegation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._minSelfDelegation, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgEditValidator, rhs: Cosmos_Staking_V1beta1_MsgEditValidator) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._commissionRate != rhs_storage._commissionRate {return false}
        if _storage._minSelfDelegation != rhs_storage._minSelfDelegation {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgEditValidatorResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgEditValidatorResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgEditValidatorResponse, rhs: Cosmos_Staking_V1beta1_MsgEditValidatorResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgDelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _delegatorAddress: String = String()
    var _validatorAddress: String = String()
    var _amount: Cosmos_Base_V1beta1_Coin? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _delegatorAddress = source._delegatorAddress
      _validatorAddress = source._validatorAddress
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._delegatorAddress)
        case 2: try decoder.decodeSingularStringField(value: &_storage._validatorAddress)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._delegatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delegatorAddress, fieldNumber: 1)
      }
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorAddress, fieldNumber: 2)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgDelegate, rhs: Cosmos_Staking_V1beta1_MsgDelegate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._delegatorAddress != rhs_storage._delegatorAddress {return false}
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgDelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgDelegateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap()

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let _ = try decoder.nextFieldNumber() {
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgDelegateResponse, rhs: Cosmos_Staking_V1beta1_MsgDelegateResponse) -> Bool {
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgBeginRedelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBeginRedelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_src_address"),
    3: .standard(proto: "validator_dst_address"),
    4: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _delegatorAddress: String = String()
    var _validatorSrcAddress: String = String()
    var _validatorDstAddress: String = String()
    var _amount: Cosmos_Base_V1beta1_Coin? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _delegatorAddress = source._delegatorAddress
      _validatorSrcAddress = source._validatorSrcAddress
      _validatorDstAddress = source._validatorDstAddress
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._delegatorAddress)
        case 2: try decoder.decodeSingularStringField(value: &_storage._validatorSrcAddress)
        case 3: try decoder.decodeSingularStringField(value: &_storage._validatorDstAddress)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._delegatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delegatorAddress, fieldNumber: 1)
      }
      if !_storage._validatorSrcAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorSrcAddress, fieldNumber: 2)
      }
      if !_storage._validatorDstAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorDstAddress, fieldNumber: 3)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgBeginRedelegate, rhs: Cosmos_Staking_V1beta1_MsgBeginRedelegate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._delegatorAddress != rhs_storage._delegatorAddress {return false}
        if _storage._validatorSrcAddress != rhs_storage._validatorSrcAddress {return false}
        if _storage._validatorDstAddress != rhs_storage._validatorDstAddress {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgBeginRedelegateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "completion_time"),
  ]

  fileprivate class _StorageClass {
    var _completionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _completionTime = source._completionTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._completionTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._completionTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse, rhs: Cosmos_Staking_V1beta1_MsgBeginRedelegateResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._completionTime != rhs_storage._completionTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgUndelegate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUndelegate"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "delegator_address"),
    2: .standard(proto: "validator_address"),
    3: .same(proto: "amount"),
  ]

  fileprivate class _StorageClass {
    var _delegatorAddress: String = String()
    var _validatorAddress: String = String()
    var _amount: Cosmos_Base_V1beta1_Coin? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _delegatorAddress = source._delegatorAddress
      _validatorAddress = source._validatorAddress
      _amount = source._amount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._delegatorAddress)
        case 2: try decoder.decodeSingularStringField(value: &_storage._validatorAddress)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._amount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._delegatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._delegatorAddress, fieldNumber: 1)
      }
      if !_storage._validatorAddress.isEmpty {
        try visitor.visitSingularStringField(value: _storage._validatorAddress, fieldNumber: 2)
      }
      if let v = _storage._amount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgUndelegate, rhs: Cosmos_Staking_V1beta1_MsgUndelegate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._delegatorAddress != rhs_storage._delegatorAddress {return false}
        if _storage._validatorAddress != rhs_storage._validatorAddress {return false}
        if _storage._amount != rhs_storage._amount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Staking_V1beta1_MsgUndelegateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MsgUndelegateResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "completion_time"),
  ]

  fileprivate class _StorageClass {
    var _completionTime: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _completionTime = source._completionTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._completionTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._completionTime {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Staking_V1beta1_MsgUndelegateResponse, rhs: Cosmos_Staking_V1beta1_MsgUndelegateResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._completionTime != rhs_storage._completionTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
