// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/vesting/v1beta1/vesting.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// BaseVestingAccount implements the VestingAccount interface. It contains all
/// the necessary fields needed for any vesting account implementation.
struct Cosmos_Vesting_V1beta1_BaseVestingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseAccount: Cosmos_Auth_V1beta1_BaseAccount {
    get {return _storage._baseAccount ?? Cosmos_Auth_V1beta1_BaseAccount()}
    set {_uniqueStorage()._baseAccount = newValue}
  }
  /// Returns true if `baseAccount` has been explicitly set.
  var hasBaseAccount: Bool {return _storage._baseAccount != nil}
  /// Clears the value of `baseAccount`. Subsequent reads from it will return its default value.
  mutating func clearBaseAccount() {_uniqueStorage()._baseAccount = nil}

  var originalVesting: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._originalVesting}
    set {_uniqueStorage()._originalVesting = newValue}
  }

  var delegatedFree: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._delegatedFree}
    set {_uniqueStorage()._delegatedFree = newValue}
  }

  var delegatedVesting: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._delegatedVesting}
    set {_uniqueStorage()._delegatedVesting = newValue}
  }

  var endTime: Int64 {
    get {return _storage._endTime}
    set {_uniqueStorage()._endTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// ContinuousVestingAccount implements the VestingAccount interface. It
/// continuously vests by unlocking coins linearly with respect to time.
struct Cosmos_Vesting_V1beta1_ContinuousVestingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseVestingAccount: Cosmos_Vesting_V1beta1_BaseVestingAccount {
    get {return _storage._baseVestingAccount ?? Cosmos_Vesting_V1beta1_BaseVestingAccount()}
    set {_uniqueStorage()._baseVestingAccount = newValue}
  }
  /// Returns true if `baseVestingAccount` has been explicitly set.
  var hasBaseVestingAccount: Bool {return _storage._baseVestingAccount != nil}
  /// Clears the value of `baseVestingAccount`. Subsequent reads from it will return its default value.
  mutating func clearBaseVestingAccount() {_uniqueStorage()._baseVestingAccount = nil}

  var startTime: Int64 {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// DelayedVestingAccount implements the VestingAccount interface. It vests all
/// coins after a specific time, but non prior. In other words, it keeps them
/// locked until a specified time.
struct Cosmos_Vesting_V1beta1_DelayedVestingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseVestingAccount: Cosmos_Vesting_V1beta1_BaseVestingAccount {
    get {return _storage._baseVestingAccount ?? Cosmos_Vesting_V1beta1_BaseVestingAccount()}
    set {_uniqueStorage()._baseVestingAccount = newValue}
  }
  /// Returns true if `baseVestingAccount` has been explicitly set.
  var hasBaseVestingAccount: Bool {return _storage._baseVestingAccount != nil}
  /// Clears the value of `baseVestingAccount`. Subsequent reads from it will return its default value.
  mutating func clearBaseVestingAccount() {_uniqueStorage()._baseVestingAccount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Period defines a length of time and amount of coins that will vest.
struct Cosmos_Vesting_V1beta1_Period {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var length: Int64 = 0

  var amount: [Cosmos_Base_V1beta1_Coin] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// PeriodicVestingAccount implements the VestingAccount interface. It
/// periodically vests by unlocking coins during each specified period.
struct Cosmos_Vesting_V1beta1_PeriodicVestingAccount {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var baseVestingAccount: Cosmos_Vesting_V1beta1_BaseVestingAccount {
    get {return _storage._baseVestingAccount ?? Cosmos_Vesting_V1beta1_BaseVestingAccount()}
    set {_uniqueStorage()._baseVestingAccount = newValue}
  }
  /// Returns true if `baseVestingAccount` has been explicitly set.
  var hasBaseVestingAccount: Bool {return _storage._baseVestingAccount != nil}
  /// Clears the value of `baseVestingAccount`. Subsequent reads from it will return its default value.
  mutating func clearBaseVestingAccount() {_uniqueStorage()._baseVestingAccount = nil}

  var startTime: Int64 {
    get {return _storage._startTime}
    set {_uniqueStorage()._startTime = newValue}
  }

  var vestingPeriods: [Cosmos_Vesting_V1beta1_Period] {
    get {return _storage._vestingPeriods}
    set {_uniqueStorage()._vestingPeriods = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.vesting.v1beta1"

extension Cosmos_Vesting_V1beta1_BaseVestingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BaseVestingAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_account"),
    2: .standard(proto: "original_vesting"),
    3: .standard(proto: "delegated_free"),
    4: .standard(proto: "delegated_vesting"),
    5: .standard(proto: "end_time"),
  ]

  fileprivate class _StorageClass {
    var _baseAccount: Cosmos_Auth_V1beta1_BaseAccount? = nil
    var _originalVesting: [Cosmos_Base_V1beta1_Coin] = []
    var _delegatedFree: [Cosmos_Base_V1beta1_Coin] = []
    var _delegatedVesting: [Cosmos_Base_V1beta1_Coin] = []
    var _endTime: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseAccount = source._baseAccount
      _originalVesting = source._originalVesting
      _delegatedFree = source._delegatedFree
      _delegatedVesting = source._delegatedVesting
      _endTime = source._endTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._baseAccount)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._originalVesting)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._delegatedFree)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._delegatedVesting)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._endTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._baseAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._originalVesting.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._originalVesting, fieldNumber: 2)
      }
      if !_storage._delegatedFree.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._delegatedFree, fieldNumber: 3)
      }
      if !_storage._delegatedVesting.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._delegatedVesting, fieldNumber: 4)
      }
      if _storage._endTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._endTime, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Vesting_V1beta1_BaseVestingAccount, rhs: Cosmos_Vesting_V1beta1_BaseVestingAccount) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseAccount != rhs_storage._baseAccount {return false}
        if _storage._originalVesting != rhs_storage._originalVesting {return false}
        if _storage._delegatedFree != rhs_storage._delegatedFree {return false}
        if _storage._delegatedVesting != rhs_storage._delegatedVesting {return false}
        if _storage._endTime != rhs_storage._endTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Vesting_V1beta1_ContinuousVestingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContinuousVestingAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_vesting_account"),
    2: .standard(proto: "start_time"),
  ]

  fileprivate class _StorageClass {
    var _baseVestingAccount: Cosmos_Vesting_V1beta1_BaseVestingAccount? = nil
    var _startTime: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseVestingAccount = source._baseVestingAccount
      _startTime = source._startTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._baseVestingAccount)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._startTime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._baseVestingAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._startTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTime, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Vesting_V1beta1_ContinuousVestingAccount, rhs: Cosmos_Vesting_V1beta1_ContinuousVestingAccount) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseVestingAccount != rhs_storage._baseVestingAccount {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Vesting_V1beta1_DelayedVestingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DelayedVestingAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_vesting_account"),
  ]

  fileprivate class _StorageClass {
    var _baseVestingAccount: Cosmos_Vesting_V1beta1_BaseVestingAccount? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseVestingAccount = source._baseVestingAccount
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._baseVestingAccount)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._baseVestingAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Vesting_V1beta1_DelayedVestingAccount, rhs: Cosmos_Vesting_V1beta1_DelayedVestingAccount) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseVestingAccount != rhs_storage._baseVestingAccount {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Vesting_V1beta1_Period: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Period"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "length"),
    2: .same(proto: "amount"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.length)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.amount)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.length != 0 {
      try visitor.visitSingularInt64Field(value: self.length, fieldNumber: 1)
    }
    if !self.amount.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.amount, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Vesting_V1beta1_Period, rhs: Cosmos_Vesting_V1beta1_Period) -> Bool {
    if lhs.length != rhs.length {return false}
    if lhs.amount != rhs.amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Vesting_V1beta1_PeriodicVestingAccount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeriodicVestingAccount"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "base_vesting_account"),
    2: .standard(proto: "start_time"),
    3: .standard(proto: "vesting_periods"),
  ]

  fileprivate class _StorageClass {
    var _baseVestingAccount: Cosmos_Vesting_V1beta1_BaseVestingAccount? = nil
    var _startTime: Int64 = 0
    var _vestingPeriods: [Cosmos_Vesting_V1beta1_Period] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _baseVestingAccount = source._baseVestingAccount
      _startTime = source._startTime
      _vestingPeriods = source._vestingPeriods
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._baseVestingAccount)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._startTime)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._vestingPeriods)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._baseVestingAccount {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if _storage._startTime != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startTime, fieldNumber: 2)
      }
      if !_storage._vestingPeriods.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._vestingPeriods, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Vesting_V1beta1_PeriodicVestingAccount, rhs: Cosmos_Vesting_V1beta1_PeriodicVestingAccount) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._baseVestingAccount != rhs_storage._baseVestingAccount {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._vestingPeriods != rhs_storage._vestingPeriods {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
