// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: cosmos/slashing/v1beta1/slashing.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// ValidatorSigningInfo defines a validator's signing info for monitoring their
/// liveness activity.
struct Cosmos_Slashing_V1beta1_ValidatorSigningInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var address: String {
    get {return _storage._address}
    set {_uniqueStorage()._address = newValue}
  }

  /// height at which validator was first a candidate OR was unjailed
  var startHeight: Int64 {
    get {return _storage._startHeight}
    set {_uniqueStorage()._startHeight = newValue}
  }

  /// index offset into signed block bit array
  var indexOffset: Int64 {
    get {return _storage._indexOffset}
    set {_uniqueStorage()._indexOffset = newValue}
  }

  /// timestamp validator cannot be unjailed until
  var jailedUntil: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._jailedUntil ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._jailedUntil = newValue}
  }
  /// Returns true if `jailedUntil` has been explicitly set.
  var hasJailedUntil: Bool {return _storage._jailedUntil != nil}
  /// Clears the value of `jailedUntil`. Subsequent reads from it will return its default value.
  mutating func clearJailedUntil() {_uniqueStorage()._jailedUntil = nil}

  /// whether or not a validator has been tombstoned (killed out of validator
  /// set)
  var tombstoned: Bool {
    get {return _storage._tombstoned}
    set {_uniqueStorage()._tombstoned = newValue}
  }

  /// missed blocks counter (to avoid scanning the array every time)
  var missedBlocksCounter: Int64 {
    get {return _storage._missedBlocksCounter}
    set {_uniqueStorage()._missedBlocksCounter = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// Params represents the parameters used for by the slashing module.
struct Cosmos_Slashing_V1beta1_Params {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var signedBlocksWindow: Int64 {
    get {return _storage._signedBlocksWindow}
    set {_uniqueStorage()._signedBlocksWindow = newValue}
  }

  var minSignedPerWindow: Data {
    get {return _storage._minSignedPerWindow}
    set {_uniqueStorage()._minSignedPerWindow = newValue}
  }

  var downtimeJailDuration: SwiftProtobuf.Google_Protobuf_Duration {
    get {return _storage._downtimeJailDuration ?? SwiftProtobuf.Google_Protobuf_Duration()}
    set {_uniqueStorage()._downtimeJailDuration = newValue}
  }
  /// Returns true if `downtimeJailDuration` has been explicitly set.
  var hasDowntimeJailDuration: Bool {return _storage._downtimeJailDuration != nil}
  /// Clears the value of `downtimeJailDuration`. Subsequent reads from it will return its default value.
  mutating func clearDowntimeJailDuration() {_uniqueStorage()._downtimeJailDuration = nil}

  var slashFractionDoubleSign: Data {
    get {return _storage._slashFractionDoubleSign}
    set {_uniqueStorage()._slashFractionDoubleSign = newValue}
  }

  var slashFractionDowntime: Data {
    get {return _storage._slashFractionDowntime}
    set {_uniqueStorage()._slashFractionDowntime = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "cosmos.slashing.v1beta1"

extension Cosmos_Slashing_V1beta1_ValidatorSigningInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ValidatorSigningInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "address"),
    2: .standard(proto: "start_height"),
    3: .standard(proto: "index_offset"),
    4: .standard(proto: "jailed_until"),
    5: .same(proto: "tombstoned"),
    6: .standard(proto: "missed_blocks_counter"),
  ]

  fileprivate class _StorageClass {
    var _address: String = String()
    var _startHeight: Int64 = 0
    var _indexOffset: Int64 = 0
    var _jailedUntil: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _tombstoned: Bool = false
    var _missedBlocksCounter: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _address = source._address
      _startHeight = source._startHeight
      _indexOffset = source._indexOffset
      _jailedUntil = source._jailedUntil
      _tombstoned = source._tombstoned
      _missedBlocksCounter = source._missedBlocksCounter
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._address)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._startHeight)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._indexOffset)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._jailedUntil)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._tombstoned)
        case 6: try decoder.decodeSingularInt64Field(value: &_storage._missedBlocksCounter)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._address.isEmpty {
        try visitor.visitSingularStringField(value: _storage._address, fieldNumber: 1)
      }
      if _storage._startHeight != 0 {
        try visitor.visitSingularInt64Field(value: _storage._startHeight, fieldNumber: 2)
      }
      if _storage._indexOffset != 0 {
        try visitor.visitSingularInt64Field(value: _storage._indexOffset, fieldNumber: 3)
      }
      if let v = _storage._jailedUntil {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._tombstoned != false {
        try visitor.visitSingularBoolField(value: _storage._tombstoned, fieldNumber: 5)
      }
      if _storage._missedBlocksCounter != 0 {
        try visitor.visitSingularInt64Field(value: _storage._missedBlocksCounter, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Slashing_V1beta1_ValidatorSigningInfo, rhs: Cosmos_Slashing_V1beta1_ValidatorSigningInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._address != rhs_storage._address {return false}
        if _storage._startHeight != rhs_storage._startHeight {return false}
        if _storage._indexOffset != rhs_storage._indexOffset {return false}
        if _storage._jailedUntil != rhs_storage._jailedUntil {return false}
        if _storage._tombstoned != rhs_storage._tombstoned {return false}
        if _storage._missedBlocksCounter != rhs_storage._missedBlocksCounter {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Cosmos_Slashing_V1beta1_Params: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Params"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "signed_blocks_window"),
    2: .standard(proto: "min_signed_per_window"),
    3: .standard(proto: "downtime_jail_duration"),
    4: .standard(proto: "slash_fraction_double_sign"),
    5: .standard(proto: "slash_fraction_downtime"),
  ]

  fileprivate class _StorageClass {
    var _signedBlocksWindow: Int64 = 0
    var _minSignedPerWindow: Data = SwiftProtobuf.Internal.emptyData
    var _downtimeJailDuration: SwiftProtobuf.Google_Protobuf_Duration? = nil
    var _slashFractionDoubleSign: Data = SwiftProtobuf.Internal.emptyData
    var _slashFractionDowntime: Data = SwiftProtobuf.Internal.emptyData

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _signedBlocksWindow = source._signedBlocksWindow
      _minSignedPerWindow = source._minSignedPerWindow
      _downtimeJailDuration = source._downtimeJailDuration
      _slashFractionDoubleSign = source._slashFractionDoubleSign
      _slashFractionDowntime = source._slashFractionDowntime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._signedBlocksWindow)
        case 2: try decoder.decodeSingularBytesField(value: &_storage._minSignedPerWindow)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._downtimeJailDuration)
        case 4: try decoder.decodeSingularBytesField(value: &_storage._slashFractionDoubleSign)
        case 5: try decoder.decodeSingularBytesField(value: &_storage._slashFractionDowntime)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._signedBlocksWindow != 0 {
        try visitor.visitSingularInt64Field(value: _storage._signedBlocksWindow, fieldNumber: 1)
      }
      if !_storage._minSignedPerWindow.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._minSignedPerWindow, fieldNumber: 2)
      }
      if let v = _storage._downtimeJailDuration {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._slashFractionDoubleSign.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slashFractionDoubleSign, fieldNumber: 4)
      }
      if !_storage._slashFractionDowntime.isEmpty {
        try visitor.visitSingularBytesField(value: _storage._slashFractionDowntime, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Cosmos_Slashing_V1beta1_Params, rhs: Cosmos_Slashing_V1beta1_Params) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._signedBlocksWindow != rhs_storage._signedBlocksWindow {return false}
        if _storage._minSignedPerWindow != rhs_storage._minSignedPerWindow {return false}
        if _storage._downtimeJailDuration != rhs_storage._downtimeJailDuration {return false}
        if _storage._slashFractionDoubleSign != rhs_storage._slashFractionDoubleSign {return false}
        if _storage._slashFractionDowntime != rhs_storage._slashFractionDowntime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
