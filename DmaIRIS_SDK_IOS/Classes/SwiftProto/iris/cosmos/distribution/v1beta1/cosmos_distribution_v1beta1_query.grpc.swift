//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: cosmos/distribution/v1beta1/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Cosmos_Distribution_V1beta1_QueryClient, then call methods of this protocol to make API calls.
internal protocol Cosmos_Distribution_V1beta1_QueryClientProtocol: GRPCClient {
  func params(
    _ request: Cosmos_Distribution_V1beta1_QueryParamsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse>

  func validatorOutstandingRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse>

  func validatorCommission(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse>

  func validatorSlashes(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse>

  func delegationRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse>

  func delegationTotalRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse>

  func delegatorValidators(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse>

  func delegatorWithdrawAddress(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse>

  func communityPool(
    _ request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse>

}

extension Cosmos_Distribution_V1beta1_QueryClientProtocol {

  /// Params queries params of the distribution module.
  ///
  /// - Parameters:
  ///   - request: Request to send to Params.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func params(
    _ request: Cosmos_Distribution_V1beta1_QueryParamsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryParamsRequest, Cosmos_Distribution_V1beta1_QueryParamsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/Params",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// ValidatorOutstandingRewards queries rewards of a validator address.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorOutstandingRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorOutstandingRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/ValidatorOutstandingRewards",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// ValidatorCommission queries accumulated commission for a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorCommission.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorCommission(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/ValidatorCommission",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// ValidatorSlashes queries slash events of a validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to ValidatorSlashes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func validatorSlashes(
    _ request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/ValidatorSlashes",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// DelegationRewards queries the total rewards accrued by a delegation.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegationRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegationRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/DelegationRewards",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// DelegationTotalRewards queries the total rewards accrued by a each
  /// validator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegationTotalRewards.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegationTotalRewards(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/DelegationTotalRewards",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// DelegatorValidators queries the validators of a delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorValidators.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorValidators(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/DelegatorValidators",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// DelegatorWithdrawAddress queries withdraw address of a delegator.
  ///
  /// - Parameters:
  ///   - request: Request to send to DelegatorWithdrawAddress.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delegatorWithdrawAddress(
    _ request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/DelegatorWithdrawAddress",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// CommunityPool queries the community pool coins.
  ///
  /// - Parameters:
  ///   - request: Request to send to CommunityPool.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func communityPool(
    _ request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse> {
    return self.makeUnaryCall(
      path: "/cosmos.distribution.v1beta1.Query/CommunityPool",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Cosmos_Distribution_V1beta1_QueryClient: Cosmos_Distribution_V1beta1_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the cosmos.distribution.v1beta1.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Cosmos_Distribution_V1beta1_QueryProvider: CallHandlerProvider {
  /// Params queries params of the distribution module.
  func params(request: Cosmos_Distribution_V1beta1_QueryParamsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryParamsResponse>
  /// ValidatorOutstandingRewards queries rewards of a validator address.
  func validatorOutstandingRewards(request: Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryValidatorOutstandingRewardsResponse>
  /// ValidatorCommission queries accumulated commission for a validator.
  func validatorCommission(request: Cosmos_Distribution_V1beta1_QueryValidatorCommissionRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryValidatorCommissionResponse>
  /// ValidatorSlashes queries slash events of a validator.
  func validatorSlashes(request: Cosmos_Distribution_V1beta1_QueryValidatorSlashesRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryValidatorSlashesResponse>
  /// DelegationRewards queries the total rewards accrued by a delegation.
  func delegationRewards(request: Cosmos_Distribution_V1beta1_QueryDelegationRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryDelegationRewardsResponse>
  /// DelegationTotalRewards queries the total rewards accrued by a each
  /// validator.
  func delegationTotalRewards(request: Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryDelegationTotalRewardsResponse>
  /// DelegatorValidators queries the validators of a delegator.
  func delegatorValidators(request: Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryDelegatorValidatorsResponse>
  /// DelegatorWithdrawAddress queries withdraw address of a delegator.
  func delegatorWithdrawAddress(request: Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryDelegatorWithdrawAddressResponse>
  /// CommunityPool queries the community pool coins.
  func communityPool(request: Cosmos_Distribution_V1beta1_QueryCommunityPoolRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cosmos_Distribution_V1beta1_QueryCommunityPoolResponse>
}

extension Cosmos_Distribution_V1beta1_QueryProvider {
  internal var serviceName: Substring { return "cosmos.distribution.v1beta1.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Params":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.params(request: request, context: context)
        }
      }

    case "ValidatorOutstandingRewards":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.validatorOutstandingRewards(request: request, context: context)
        }
      }

    case "ValidatorCommission":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.validatorCommission(request: request, context: context)
        }
      }

    case "ValidatorSlashes":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.validatorSlashes(request: request, context: context)
        }
      }

    case "DelegationRewards":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.delegationRewards(request: request, context: context)
        }
      }

    case "DelegationTotalRewards":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.delegationTotalRewards(request: request, context: context)
        }
      }

    case "DelegatorValidators":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.delegatorValidators(request: request, context: context)
        }
      }

    case "DelegatorWithdrawAddress":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.delegatorWithdrawAddress(request: request, context: context)
        }
      }

    case "CommunityPool":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.communityPool(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

