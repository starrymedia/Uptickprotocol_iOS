// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: oracle/query.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// QueryFeedRequest is request type for the Query/Feed RPC method
struct Irismod_Oracle_QueryFeedRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFeedResponse is response type for the Query/Feed RPC method
struct Irismod_Oracle_QueryFeedResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feed: Irismod_Oracle_FeedContext {
    get {return _storage._feed ?? Irismod_Oracle_FeedContext()}
    set {_uniqueStorage()._feed = newValue}
  }
  /// Returns true if `feed` has been explicitly set.
  var hasFeed: Bool {return _storage._feed != nil}
  /// Clears the value of `feed`. Subsequent reads from it will return its default value.
  mutating func clearFeed() {_uniqueStorage()._feed = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// QueryFeedsRequest is request type for the Query/Feeds RPC method
struct Irismod_Oracle_QueryFeedsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var state: String {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  /// pagination defines an optional pagination for the request.
  var pagination: Cosmos_Query_PageRequest {
    get {return _storage._pagination ?? Cosmos_Query_PageRequest()}
    set {_uniqueStorage()._pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return _storage._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {_uniqueStorage()._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// QueryFeedsResponse is response type for the Query/Feeds RPC method
struct Irismod_Oracle_QueryFeedsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feeds: [Irismod_Oracle_FeedContext] {
    get {return _storage._feeds}
    set {_uniqueStorage()._feeds = newValue}
  }

  var pagination: Cosmos_Query_PageResponse {
    get {return _storage._pagination ?? Cosmos_Query_PageResponse()}
    set {_uniqueStorage()._pagination = newValue}
  }
  /// Returns true if `pagination` has been explicitly set.
  var hasPagination: Bool {return _storage._pagination != nil}
  /// Clears the value of `pagination`. Subsequent reads from it will return its default value.
  mutating func clearPagination() {_uniqueStorage()._pagination = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

/// QueryFeedValueRequest is request type for the Query/FeedValue RPC method
struct Irismod_Oracle_QueryFeedValueRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedName: String = String()

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// QueryFeedValueResponse is response type for the Query/FeedValue RPC method
struct Irismod_Oracle_QueryFeedValueResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feedValues: [Irismod_Oracle_FeedValue] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// FeedContext defines the feed context struct
struct Irismod_Oracle_FeedContext {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var feed: Irismod_Oracle_Feed {
    get {return _storage._feed ?? Irismod_Oracle_Feed()}
    set {_uniqueStorage()._feed = newValue}
  }
  /// Returns true if `feed` has been explicitly set.
  var hasFeed: Bool {return _storage._feed != nil}
  /// Clears the value of `feed`. Subsequent reads from it will return its default value.
  mutating func clearFeed() {_uniqueStorage()._feed = nil}

  var serviceName: String {
    get {return _storage._serviceName}
    set {_uniqueStorage()._serviceName = newValue}
  }

  var providers: [String] {
    get {return _storage._providers}
    set {_uniqueStorage()._providers = newValue}
  }

  var input: String {
    get {return _storage._input}
    set {_uniqueStorage()._input = newValue}
  }

  var timeout: Int64 {
    get {return _storage._timeout}
    set {_uniqueStorage()._timeout = newValue}
  }

  var serviceFeeCap: [Cosmos_Base_V1beta1_Coin] {
    get {return _storage._serviceFeeCap}
    set {_uniqueStorage()._serviceFeeCap = newValue}
  }

  var repeatedFrequency: UInt64 {
    get {return _storage._repeatedFrequency}
    set {_uniqueStorage()._repeatedFrequency = newValue}
  }

  var responseThreshold: UInt32 {
    get {return _storage._responseThreshold}
    set {_uniqueStorage()._responseThreshold = newValue}
  }

  var state: Irismod_Service_RequestContextState {
    get {return _storage._state}
    set {_uniqueStorage()._state = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "irismod.oracle"

extension Irismod_Oracle_QueryFeedRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFeedRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.feedName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedName.isEmpty {
      try visitor.visitSingularStringField(value: self.feedName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_QueryFeedRequest, rhs: Irismod_Oracle_QueryFeedRequest) -> Bool {
    if lhs.feedName != rhs.feedName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_QueryFeedResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFeedResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feed"),
  ]

  fileprivate class _StorageClass {
    var _feed: Irismod_Oracle_FeedContext? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _feed = source._feed
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._feed)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._feed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_QueryFeedResponse, rhs: Irismod_Oracle_QueryFeedResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._feed != rhs_storage._feed {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_QueryFeedsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFeedsRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "state"),
    2: .same(proto: "pagination"),
  ]

  fileprivate class _StorageClass {
    var _state: String = String()
    var _pagination: Cosmos_Query_PageRequest? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _state = source._state
      _pagination = source._pagination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._state)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pagination)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._state.isEmpty {
        try visitor.visitSingularStringField(value: _storage._state, fieldNumber: 1)
      }
      if let v = _storage._pagination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_QueryFeedsRequest, rhs: Irismod_Oracle_QueryFeedsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._state != rhs_storage._state {return false}
        if _storage._pagination != rhs_storage._pagination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_QueryFeedsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFeedsResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feeds"),
    2: .same(proto: "pagination"),
  ]

  fileprivate class _StorageClass {
    var _feeds: [Irismod_Oracle_FeedContext] = []
    var _pagination: Cosmos_Query_PageResponse? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _feeds = source._feeds
      _pagination = source._pagination
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeRepeatedMessageField(value: &_storage._feeds)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._pagination)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._feeds.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._feeds, fieldNumber: 1)
      }
      if let v = _storage._pagination {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_QueryFeedsResponse, rhs: Irismod_Oracle_QueryFeedsResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._feeds != rhs_storage._feeds {return false}
        if _storage._pagination != rhs_storage._pagination {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_QueryFeedValueRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFeedValueRequest"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_name"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.feedName)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedName.isEmpty {
      try visitor.visitSingularStringField(value: self.feedName, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_QueryFeedValueRequest, rhs: Irismod_Oracle_QueryFeedValueRequest) -> Bool {
    if lhs.feedName != rhs.feedName {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_QueryFeedValueResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryFeedValueResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "feed_values"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.feedValues)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedValues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedValues, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_QueryFeedValueResponse, rhs: Irismod_Oracle_QueryFeedValueResponse) -> Bool {
    if lhs.feedValues != rhs.feedValues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Irismod_Oracle_FeedContext: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FeedContext"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feed"),
    2: .standard(proto: "service_name"),
    3: .same(proto: "providers"),
    4: .same(proto: "input"),
    5: .same(proto: "timeout"),
    6: .standard(proto: "service_fee_cap"),
    7: .standard(proto: "repeated_frequency"),
    8: .standard(proto: "response_threshold"),
    9: .same(proto: "state"),
  ]

  fileprivate class _StorageClass {
    var _feed: Irismod_Oracle_Feed? = nil
    var _serviceName: String = String()
    var _providers: [String] = []
    var _input: String = String()
    var _timeout: Int64 = 0
    var _serviceFeeCap: [Cosmos_Base_V1beta1_Coin] = []
    var _repeatedFrequency: UInt64 = 0
    var _responseThreshold: UInt32 = 0
    var _state: Irismod_Service_RequestContextState = .running

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _feed = source._feed
      _serviceName = source._serviceName
      _providers = source._providers
      _input = source._input
      _timeout = source._timeout
      _serviceFeeCap = source._serviceFeeCap
      _repeatedFrequency = source._repeatedFrequency
      _responseThreshold = source._responseThreshold
      _state = source._state
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._feed)
        case 2: try decoder.decodeSingularStringField(value: &_storage._serviceName)
        case 3: try decoder.decodeRepeatedStringField(value: &_storage._providers)
        case 4: try decoder.decodeSingularStringField(value: &_storage._input)
        case 5: try decoder.decodeSingularInt64Field(value: &_storage._timeout)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._serviceFeeCap)
        case 7: try decoder.decodeSingularUInt64Field(value: &_storage._repeatedFrequency)
        case 8: try decoder.decodeSingularUInt32Field(value: &_storage._responseThreshold)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._state)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._feed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._serviceName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceName, fieldNumber: 2)
      }
      if !_storage._providers.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._providers, fieldNumber: 3)
      }
      if !_storage._input.isEmpty {
        try visitor.visitSingularStringField(value: _storage._input, fieldNumber: 4)
      }
      if _storage._timeout != 0 {
        try visitor.visitSingularInt64Field(value: _storage._timeout, fieldNumber: 5)
      }
      if !_storage._serviceFeeCap.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._serviceFeeCap, fieldNumber: 6)
      }
      if _storage._repeatedFrequency != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._repeatedFrequency, fieldNumber: 7)
      }
      if _storage._responseThreshold != 0 {
        try visitor.visitSingularUInt32Field(value: _storage._responseThreshold, fieldNumber: 8)
      }
      if _storage._state != .running {
        try visitor.visitSingularEnumField(value: _storage._state, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Irismod_Oracle_FeedContext, rhs: Irismod_Oracle_FeedContext) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._feed != rhs_storage._feed {return false}
        if _storage._serviceName != rhs_storage._serviceName {return false}
        if _storage._providers != rhs_storage._providers {return false}
        if _storage._input != rhs_storage._input {return false}
        if _storage._timeout != rhs_storage._timeout {return false}
        if _storage._serviceFeeCap != rhs_storage._serviceFeeCap {return false}
        if _storage._repeatedFrequency != rhs_storage._repeatedFrequency {return false}
        if _storage._responseThreshold != rhs_storage._responseThreshold {return false}
        if _storage._state != rhs_storage._state {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
