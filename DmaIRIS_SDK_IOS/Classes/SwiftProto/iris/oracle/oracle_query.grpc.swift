//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: oracle/query.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import GRPC
import NIO
import SwiftProtobuf


/// Usage: instantiate Irismod_Oracle_QueryClient, then call methods of this protocol to make API calls.
internal protocol Irismod_Oracle_QueryClientProtocol: GRPCClient {
  func feed(
    _ request: Irismod_Oracle_QueryFeedRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Oracle_QueryFeedRequest, Irismod_Oracle_QueryFeedResponse>

  func feeds(
    _ request: Irismod_Oracle_QueryFeedsRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Oracle_QueryFeedsRequest, Irismod_Oracle_QueryFeedsResponse>

  func feedValue(
    _ request: Irismod_Oracle_QueryFeedValueRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Irismod_Oracle_QueryFeedValueRequest, Irismod_Oracle_QueryFeedValueResponse>

}

extension Irismod_Oracle_QueryClientProtocol {

  /// Feed queries the feed
  ///
  /// - Parameters:
  ///   - request: Request to send to Feed.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feed(
    _ request: Irismod_Oracle_QueryFeedRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Oracle_QueryFeedRequest, Irismod_Oracle_QueryFeedResponse> {
    return self.makeUnaryCall(
      path: "/irismod.oracle.Query/Feed",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// QueryFeedsRequest queries the feed list
  ///
  /// - Parameters:
  ///   - request: Request to send to Feeds.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feeds(
    _ request: Irismod_Oracle_QueryFeedsRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Oracle_QueryFeedsRequest, Irismod_Oracle_QueryFeedsResponse> {
    return self.makeUnaryCall(
      path: "/irismod.oracle.Query/Feeds",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }

  /// FeedValue queries the feed value
  ///
  /// - Parameters:
  ///   - request: Request to send to FeedValue.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func feedValue(
    _ request: Irismod_Oracle_QueryFeedValueRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Irismod_Oracle_QueryFeedValueRequest, Irismod_Oracle_QueryFeedValueResponse> {
    return self.makeUnaryCall(
      path: "/irismod.oracle.Query/FeedValue",
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions
    )
  }
}

internal final class Irismod_Oracle_QueryClient: Irismod_Oracle_QueryClientProtocol {
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions

  /// Creates a client for the irismod.oracle.Query service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  internal init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Irismod_Oracle_QueryProvider: CallHandlerProvider {
  /// Feed queries the feed
  func feed(request: Irismod_Oracle_QueryFeedRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Oracle_QueryFeedResponse>
  /// QueryFeedsRequest queries the feed list
  func feeds(request: Irismod_Oracle_QueryFeedsRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Oracle_QueryFeedsResponse>
  /// FeedValue queries the feed value
  func feedValue(request: Irismod_Oracle_QueryFeedValueRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Irismod_Oracle_QueryFeedValueResponse>
}

extension Irismod_Oracle_QueryProvider {
  internal var serviceName: Substring { return "irismod.oracle.Query" }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handleMethod(_ methodName: Substring, callHandlerContext: CallHandlerContext) -> GRPCCallHandler? {
    switch methodName {
    case "Feed":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.feed(request: request, context: context)
        }
      }

    case "Feeds":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.feeds(request: request, context: context)
        }
      }

    case "FeedValue":
      return CallHandlerFactory.makeUnary(callHandlerContext: callHandlerContext) { context in
        return { request in
          self.feedValue(request: request, context: context)
        }
      }

    default: return nil
    }
  }
}

